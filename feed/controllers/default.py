# coding: utf8

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################
import datetime, time
import re

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    session.forget()
    return service()

#
# XMLRPC
#
#########
def auth_uuid(fn):
    def new(*args, **kwargs):
        uuid, node = kwargs['auth']
        rows = db((db.auth_node.nodename==node)&(db.auth_node.uuid==uuid)).select(cacheable=True)
        if len(rows) != 1:
            return "agent authentication error"
        return fn(*args, **kwargs)
    return new

@auth_uuid
@service.xmlrpc
def delete_services(hostid=None, auth=("", "")):
    if hostid is None:
        return 0
    db(db.services.svc_hostid==hostid).delete()
    db.commit()
    return 0

@auth_uuid
@service.xmlrpc
def delete_service_list(hostid=None, svcnames=[], auth=("", "")):
    return

@auth_uuid
@service.xmlrpc
def begin_action(vars, vals, auth):
    feed_enqueue("_action_wrapper", "_begin_action", vars, vals, auth)

def _begin_action(vars, vals, auth):
    sql="""insert into SVCactions (%s) values (%s)""" % (','.join(vars), ','.join(vals))
    db.executesql(sql)
    i = db.executesql("SELECT LAST_INSERT_ID()")[0][0]
    db.commit()
    h = {}
    for a, b in zip(vars, vals):
        h[a] = b
    h['svcname'] = h['svcname'].strip("'")
    h['hostname'] = h['hostname'].strip("'")
    h['action'] = h['action'].strip("'")
    h['begin'] = h['begin'].strip("'").split('.')[0]
    h['id'] = i
    _websocket_send(json.dumps({
                 'event': 'begin_action',
                 'data': h
                }))
    if 'cron' not in h or h['cron'] == '0':
        _log("service.action",
             "action '%(a)s' on %(svc)s@%(node)s",
             dict(a=h['action'],
                  svc=h['svcname'],
                  node=h['hostname']),
             svcname=h['svcname'],
             nodename=h['hostname'])
    return 0

@auth_uuid
@service.xmlrpc
def res_action(vars, vals, auth):
    upd = []
    for a, b in zip(vars, vals):
        upd.append("%s=%s" % (a, b))
    sql="""insert into SVCactions (%s) values (%s)""" % (','.join(vars), ','.join(vals))
    db.executesql(sql)
    db.commit()
    return 0

@auth_uuid
@service.xmlrpc
def end_action(vars, vals, auth):
    feed_enqueue("_action_wrapper", "_end_action", vars, vals, auth)

def _action_wrapper(a, vars, vals, auth):
    if a == "_end_action":
        _end_action(vars, vals)
    elif a == "_begin_action":
        _begin_action(vars, vals, auth)

def _end_action(vars, vals):
    upd = []
    h = {}
    for a, b in zip(vars, vals):
        h[a] = b
        if a not in ['hostname', 'svcname', 'begin', 'action', 'hostid']:
            upd.append("%s=%s" % (a, b))
    h['begin'] = repr(h['begin'].strip("'").split('.')[0])
    sql="""select id from SVCactions where hostname=%s and svcname=%s and begin=%s and action=%s""" %\
        (h['hostname'], h['svcname'], h['begin'], h['action'])
    ids = map(lambda x: x[0], db.executesql(sql))
    if len(ids) == 0:
        return

    sql="""update SVCactions set %s where id in (%s)""" %\
        (','.join(upd), ','.join(map(str, ids)))
    db.executesql(sql)
    db.commit()

    sql = """select * from SVCactions where id in (%s)""" %\
          ','.join(map(str, ids))
    h = db.executesql(sql, as_dict=True)[0]
    h['begin'] = h['begin'].strftime("%Y-%m-%d %H:%M:%S")
    h['end'] = h['end'].strftime("%Y-%m-%d %H:%M:%S")
    h['id'] = h['ID']

    try:
        _websocket_send(json.dumps({
                 'event': 'end_action',
                 'data': h
                }))
    except:
        pass

    if h['action'] in ('start', 'startcontainer') and \
       h['status'] == 'ok':
        update_virtual_asset(h['hostname'], h['svcname'])
    if h['status'] == 'err':
        update_action_errors(h['svcname'], h['hostname'])
        update_dash_action_errors(h['svcname'], h['hostname'])
        _log("service.action",
             "action '%(a)s' error on %(svc)s@%(node)s",
             dict(a=h['action'],
                  svc=h['svcname'],
                  node=h['hostname']),
             svcname=h['svcname'],
             nodename=h['hostname'],
             level="error")
    return 0

def update_action_errors(svcname, nodename):
    svcname = svcname.strip("'")
    nodename = nodename.strip("'")
    sql = """select count(id) from SVCactions a
             where
               a.svcname = "%(svcname)s" and
               a.hostname = "%(nodename)s" and
               a.status = "err" and
               ((a.ack <> 1) or isnull(a.ack)) and
               a.begin > date_sub(now(), interval 2 day)
    """%dict(svcname=svcname, nodename=nodename)
    err = db.executesql(sql)[0][0]

    if err == 0:
         sql = """delete from b_action_errors
                  where
                    svcname = "%(svcname)s" and
                    nodename = "%(nodename)s"
         """%dict(svcname=svcname, nodename=nodename)
    else:
        sql = """insert into b_action_errors
                 set
                   svcname="%(svcname)s",
                   nodename="%(nodename)s",
                   err=%(err)d
                 on duplicate key update
                   err=%(err)d
              """%dict(svcname=svcname, nodename=nodename, err=err)
    db.executesql(sql)
    db.commit()

def update_virtual_asset(nodename, svcname):
    q = db.svcmon.mon_svcname == svcname
    q &= db.svcmon.mon_nodname == nodename
    svc = db(q).select(db.svcmon.mon_vmname).first()
    if svc is None:
        return
    q = db.nodes.nodename == nodename
    node = db(q).select(cacheable=True).first()
    if node is None:
        return
    fields = ['loc_addr', 'loc_city', 'loc_zip', 'loc_room', 'loc_building',
              'loc_floor', 'loc_rack', 'power_cabinet1', 'power_cabinet2',
              'power_supply_nb', 'power_protect', 'power_protect_breaker',
              'power_breaker1', 'power_breaker2', 'loc_country', 'enclosure']
    sql = "update nodes set "
    for f in fields:
        sql += "%s='%s',"%(f, node[f])
    sql = sql.rstrip(',')
    sql += "where nodename='%s'"%svc.mon_vmname
    db.executesql(sql)

@auth_uuid
@service.xmlrpc
def update_appinfo(vars, vals, auth):
    if len(vals) == 0:
        return
    h = {}
    for a,b in zip(vars, vals[0]):
        h[a] = b
    if "cluster_type" in h and "flex" in h["cluster_type"]:
        db.executesql("delete from appinfo where app_svcname='%s' and app_nodename='%s'"%(h['app_svcname'], h['app_nodename']))
    else:
        db.executesql("delete from appinfo where app_svcname='%s'"%h['app_svcname'])
    generic_insert('appinfo', vars, vals)

    i = vars.index('app_value')
    vals_log = []
    for _vals in vals:
        try:
            n = float(_vals[i])
            vals_log.append(_vals)
        except:
            pass

    if len(vals_log) > 0:
        generic_insert('appinfo_log', vars, vals_log)

@auth_uuid
@service.xmlrpc
def update_service(vars, vals, auth):
    feed_enqueue("_update_service", vars, vals, auth)

def _update_service(vars, vals, auth):
    if 'svc_hostid' not in vars:
        return
    if 'updated' not in vars:
        vars += ['updated']
        vals += [datetime.datetime.now()]
    h = {}
    for a,b in zip(vars, vals):
        h[a] = b
    if 'svc_version' in h:
        del(h['svc_version'])
    if 'svc_drnoaction' in h:
        if h['svc_drnoaction'] == 'False': h['svc_drnoaction'] = 'F'
        elif h['svc_drnoaction'] == 'True': h['svc_drnoaction'] = 'T'
    vars = []
    vals = []
    for var, val in h.items():
        if var not in ('svc_vmname', 'svc_guestos', 'svc_vcpus', 'svc_vmem', 'svc_containerpath'):
            vars.append(var)
            vals.append(val)
    generic_insert('services', vars, vals)
    db.commit()
    update_dash_service_not_updated(h['svc_name'].strip("'"))
    nodename, vmname, vmtype = translate_encap_nodename(h['svc_name'], auth[1])
    if nodename is not None:
        return
    if 'svc_vmname' in h:
        vars = ['mon_svcname',
                'mon_nodname',
                'mon_vmname',
                'mon_guestos',
                'mon_vcpus',
                'mon_vmem',
                'mon_containerpath']
        vals = [h['svc_name'],
                auth[1],
                h['svc_vmname'],
                h['svc_guestos'] if 'svc_guestos' in h else '',
                h['svc_vcpus'] if 'svc_vcpus' in h else '0',
                h['svc_vmem'] if 'svc_vmem' in h else '0',
                h['svc_containerpath'] if 'svc_containerpath' in h else '',
               ]
        generic_insert('svcmon', vars, vals)

@auth_uuid
@service.xmlrpc
def push_checks(vars, vals, auth):
    feed_enqueue("_push_checks", vars, vals)

def test_push_checks():
    vars = ['chk_nodename', 'chk_svcname', 'chk_type', 'chk_instance', 'chk_value', 'chk_updated']
    vals = [['lmwbic5c', '', 'fs_u', '/applis/ITM', '3', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/applis/carthic', '19', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/applis/isis', '10', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/applis/oracle', '14', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/applis', '9', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/bkp01/oracle/EPROD', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/bkp01/oracle/FPROD', '7', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/bkp01/oracle/PELOPS', '34', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/bkp01', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/data01/oracle/ASM', '9', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/data01/oracle/EPROD', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/data01/oracle/FPROD', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/data01/oracle/PELOPS', '2', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/data01', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/home', '76', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/moteurs/ITM', '70', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/moteurs/carthic', '5', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/moteurs/isis', '11', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/moteurs/oracle', '76', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/moteurs/oracrs', '83', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/moteurs/precise', '59', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/moteurs', '9', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/opt', '59', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/outils/isis', '15', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/outils', '5', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/tmp', '35', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/usr', '38', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/var/adm/crash', '59', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/var', '26', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/stand', '22', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_u', '/', '25', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/', '38', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/stand', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/var', '13', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/var/adm/crash', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/usr', '15', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/tmp', '3', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/outils', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/outils/isis', '33', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/opt', '35', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/moteurs', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/moteurs/precise', '16', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/moteurs/oracrs', '16', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/moteurs/oracle', '25', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/moteurs/isis', '2', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/moteurs/carthic', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/moteurs/ITM', '5', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/home', '18', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/data01', '2', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/data01/oracle/PELOPS', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/data01/oracle/FPROD', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/data01/oracle/EPROD', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/data01/oracle/ASM', '26', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/bkp01', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/bkp01/oracle/PELOPS', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/bkp01/oracle/FPROD', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/bkp01/oracle/EPROD', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/applis', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/applis/oracle', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/applis/isis', '16', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/applis/carthic', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'fs_i', '/applis/ITM', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'vg_u', 'vg00', '85', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'vg_u', 'vgswap', '66', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'vg_u', 'vgMOTEURS', '57', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'vg_u', 'vgAPPLIS', '5', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'vg_u', 'vgORACLE', '78', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan14.link', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan14.speed', '1000', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan14.autoneg', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan14.duplex', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan0.link', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan0.speed', '1000', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan0.autoneg', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan0.duplex', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan2.link', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan2.speed', '10000', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan2.autoneg', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan2.duplex', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan4.link', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan4.speed', '1000', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan4.autoneg', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan4.duplex', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan6.link', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan6.speed', '1000', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan6.autoneg', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan6.duplex', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan9.link', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan9.speed', '10000', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan9.autoneg', '0', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'eth', 'lan9.duplex', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'lag', 'lan900.paths', '2', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'lag', 'lan901.paths', '2', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '60060480000290101370533030414435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '60060480000290101370533030313441', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d344644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304343', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304343', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353939', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3639', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d394244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3931', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3439', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303632', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303038', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303130', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303134', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303138', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303545', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303545', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303038', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303130', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303138', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303134', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323831', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303232', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303241', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304145', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304236', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304245', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304639', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313431', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303632', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313831', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323831', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313839', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304145', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303241', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304245', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324131', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303232', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313831', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313431', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304236', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304639', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313839', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333331', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343831', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334331', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334339', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343131', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d344144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d344235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d344135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343831', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343839', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324131', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333331', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d343744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d344144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334331', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334339', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d344235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343131', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d364335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d344135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d343839', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d384544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d384644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d384635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d384631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d413931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393039', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d413939', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d413935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d364544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d373535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d413944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d373535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383731', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d384639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d413844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d374539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d374344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393031', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d384135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383731', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d383944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d384135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d384544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4a4539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d384631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d394135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d384635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d384639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d384644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393031', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d383844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393039', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4a4535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4a4444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393631', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d394235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d413844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d413931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d413935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d413939', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d394139', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d413944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d394235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393631', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c4144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d484539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a4144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d484444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d394135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c4135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d484544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d414431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4431', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3939', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d394139', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d503135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4e3135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d423344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d484535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d394335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4a4544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d414344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d394335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3944', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a4135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3231', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4431', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493231', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493531', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493935', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a3244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d494644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d493339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4a4235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c3344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4339', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4c4235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3939', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b4144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4239', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4b3139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d38001794198', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d38001791a9c', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d38001794018', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d380017907ec', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3631', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303546', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303143', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303043', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d304439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323031', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d313739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d324439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d323931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d333639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d334635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d314544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393839', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303143', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d393931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303633', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303043', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303546', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d304431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314231', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313331', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d474435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334539', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323031', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314631', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334635', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d314639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d313739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d324439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d333135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d334639', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393439', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303633', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d323435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393431', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494535', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d494544', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d393839', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d3800199d134', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d3800199d378', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d3800199b598', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303634', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303634', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303630', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303630', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d38001790784', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d38001794140', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d380017906d4', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d380017940a8', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303635', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303635', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d303631', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d303631', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '500000e110fd9e26', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d3800199b650', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d3800199bf04', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '5001d3800199b884', '1', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353035', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d344644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354139', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353131', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353939', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353931', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423044', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d423644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d394244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3539', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3735', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3744', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3931', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3135', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e4635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3439', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3631', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3035', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3644', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3335', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3835', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3444', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3044', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3639', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3344', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3644', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3544', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3735', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3744', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3844', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3244', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3235', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3535', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4344', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3144', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3835', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3435', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4244', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3635', '8', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353039', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d354135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d363144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d363144', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353944', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d353031', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353039', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d354135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353031', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3731', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d353844', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3839', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4e3831', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f3935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789057553594d4f4335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3731', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4135', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4444', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3831', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3739', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4235', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4435', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d3935', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c3839', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4d4335', '4', '2013-12-10 04:03:08.378944'], ['lmwbic5c', '', 'mpath', '6006048000028789042053594d4c4231', '8', '2013-12-10 04:03:08.378944']]
    _push_checks(vars, vals)

def _push_checks(vars, vals):
    """
        chk_nodename
        chk_svcname
        chk_type
        chk_instance
        chk_value
        chk_updated
    """

    n = len(vals)

    # purge old checks
    if n > 0:
        nodename = vals[0][0]
        where = ""
        for v in vals:
             where += """ and not (chk_type="%(chk_type)s" and chk_instance="%(chk_instance)s") """%dict(chk_type=v[2], chk_instance=v[3])
        sql = """delete from checks_live
                 where
                   chk_nodename="%(nodename)s" and
                   chk_type not in ("netdev_err", "save")
                   %(where)s
              """%dict(nodename=nodename, where=where)
        db.executesql(sql)
        db.commit()

        # for checks coming from vservice, update the svcname field
        svcname = vals[0][1]
        if svcname == "":
            q = db.svcmon.mon_vmname == nodename
            row = db(q).select(db.svcmon.mon_svcname, limitby=(0,1)).first()
            if row is not None:
                svcname = row.mon_svcname
                for i, val in enumerate(vals):
                    vals[i][1] = svcname
    else:
        return

     # insert new checks
    while len(vals) > 100:
        generic_insert('checks_live', vars, vals[:100])
        vals = vals[100:]
    generic_insert('checks_live', vars, vals)
    db.commit()

    q = db.checks_live.chk_nodename==nodename
    q &= db.checks_live.chk_type != "netdev_err"
    q &= db.checks_live.chk_type != "save"
    rows = db(q).select()

    update_thresholds_batch(rows, one_source=True)

    # update dashboard alerts
    if n > 0:
        update_dash_checks(nodename)

@auth_uuid
@service.xmlrpc
def insert_generic(data, auth):
    feed_enqueue("_insert_generic", data, auth)

def _insert_generic(data, auth):
    now = datetime.datetime.now()
    if type(data) != dict:
        return
    if 'hba' in data:
        vars, vals = data['hba']
        if 'updated' not in vars:
            vars.append('updated')
            for i, val in enumerate(vals):
                vals[i].append(now)
        sql = """delete from node_hba where nodename="%s" """%auth[1]
        db.executesql(sql)
        generic_insert('node_hba', vars, vals)
    if 'targets' in data:
        vars, vals = data['targets']
        if 'updated' not in vars:
            vars.append('updated')
            for i, val in enumerate(vals):
                vals[i].append(now)
        if 'nodename' not in vars:
            vars.append('nodename')
            for i, val in enumerate(vals):
                vals[i].append(auth[1])
        sql = """delete from stor_zone where nodename="%s" """%auth[1]
        db.executesql(sql)
        generic_insert('stor_zone', vars, vals)
    if 'lan' in data:
        vars, vals = data['lan']
        if 'updated' not in vars:
            vars.append('updated')
            for i, val in enumerate(vals):
                vals[i].append(now)
        if 'nodename' not in vars:
            vars.append('nodename')
            for i, val in enumerate(vals):
                vals[i].append(auth[1])
        sql = """delete from node_ip where nodename="%s" """%auth[1]
        db.executesql(sql)
        generic_insert('node_ip', vars, vals)
    if 'uids' in data:
        vars, vals = data['uids']
        if 'updated' not in vars:
            vars.append('updated')
            for i, val in enumerate(vals):
                vals[i].append(now)
        if 'nodename' not in vars:
            vars.append('nodename')
            for i, val in enumerate(vals):
                vals[i].append(auth[1])
        sql = """delete from node_users where nodename="%s" """%auth[1]
        db.executesql(sql)
        generic_insert('node_users', vars, vals)
        node_users_alerts(auth[1])
    if 'gids' in data:
        vars, vals = data['gids']
        if 'updated' not in vars:
            vars.append('updated')
            for i, val in enumerate(vals):
                vals[i].append(now)
        if 'nodename' not in vars:
            vars.append('nodename')
            for i, val in enumerate(vals):
                vals[i].append(auth[1])
        sql = """delete from node_groups where nodename="%s" """%auth[1]
        db.executesql(sql)
        generic_insert('node_groups', vars, vals)
        node_groups_alerts(auth[1])

    db.commit()

def node_users_alerts(nodename):
    sql = """insert into dashboard
             select
                 NULL,
                 "duplicate uid",
                 NULL,
                 "%(nodename)s",
                 if(t.host_mode="PRD", 1, 0),
                 "uid %%(uid)s is used by users %%(usernames)s",
                 concat('{"uid": ', t.user_id, ', "usernames": "', t.usernames, '"}'),
                 now(),
                 NULL,
                 t.host_mode,
                 NULL,
                 now()
               from (
                 select
                   *,
                   (select host_mode from nodes where nodename="%(nodename)s") as host_mode
                 from (
                   select
                     nodename,
                     user_id,
                     group_concat(user_name) as usernames,
                     count(id) as n
                   from node_users
                   where nodename="%(nodename)s"
                   group by nodename, user_id
                 ) u
                 where u.n > 1
               ) t
               on duplicate key update
               dash_updated=now()
               """ % dict(nodename=nodename)
    n = db.executesql(sql)
    db.commit()

    # purge old alerts
    sql = """delete from dashboard where
               dash_nodename="%(nodename)s" and
               dash_type="duplicate uid" and
               dash_updated < date_sub(now(), interval 20 second)
          """ % dict(nodename=nodename)
    n = db.executesql(sql)
    db.commit()

def node_groups_alerts(nodename):
    sql = """insert into dashboard
             select
                 NULL,
                 "duplicate gid",
                 NULL,
                 "%(nodename)s",
                 if(t.host_mode="PRD", 1, 0),
                 "gid %%(gid)s is used by users %%(groupnames)s",
                 concat('{"gid": ', t.group_id, ', "groupnames": "', t.groupnames, '"}'),
                 now(),
                 NULL,
                 t.host_mode,
                 NULL,
                 now()
               from (
                 select
                   *,
                   (select host_mode from nodes where nodename="%(nodename)s") as host_mode
                 from (
                   select
                     nodename,
                     group_id,
                     group_concat(group_name) as groupnames,
                     count(id) as n
                   from node_groups
                   where nodename="%(nodename)s"
                   group by nodename, group_id
                 ) u
                 where u.n > 1
               ) t
               on duplicate key update
               dash_updated=now()
               """ % dict(nodename=nodename)
    n = db.executesql(sql)
    db.commit()

    # purge old alerts
    sql = """delete from dashboard where
               dash_nodename="%(nodename)s" and
               dash_type="duplicate gid" and
               dash_updated < date_sub(now(), interval 20 second)
          """ % dict(nodename=nodename)
    n = db.executesql(sql)
    db.commit()


@auth_uuid
@service.xmlrpc
def update_asset(vars, vals, auth):
    feed_enqueue("_update_asset", vars, vals, auth)

@auth_uuid
@service.xmlrpc
def update_asset_sync(vars, vals, auth):
    _update_asset(vars, vals, auth)

def get_os_obs_dates(obs_name):
    q = db.obsolescence.obs_type == "os"
    q &= db.obsolescence.obs_name == obs_name
    o = db(q).select(db.obsolescence.obs_warn_date,
                     db.obsolescence.obs_alert_date).first()
    if o is None:
        return None, None
    return o.obs_warn_date, o.obs_alert_date

def get_hw_obs_dates(obs_name):
    q = db.obsolescence.obs_type == "hw"
    q &= db.obsolescence.obs_name == obs_name
    o = db(q).select(db.obsolescence.obs_warn_date,
                     db.obsolescence.obs_alert_date).first()
    if o is None:
        return None, None
    return o.obs_warn_date, o.obs_alert_date

def _update_asset(vars, vals, auth):
    h = {}
    for a,b in zip(vars, vals):
        h[a] = b
    now = datetime.datetime.now()
    h['updated'] = now
    if 'environnement' in h and 'host_mode' not in h:
        h['host_mode'] = h['environnement']
        del(h['environnement'])
    if 'environment' in h:
        h['environnement'] = h['environment']
        del(h['environment'])
    if 'enclosure' in h and h['enclosure'] == 'Unknown':
        del(h['enclosure'])

    # add obsolescence info
    os_obs_warn_date, os_obs_alert_date = get_os_obs_dates(' '.join((h['os_name'], h['os_vendor'], h['os_release'])))
    hw_obs_warn_date, hw_obs_alert_date = get_hw_obs_dates(h['model'])
    h['os_obs_warn_date'] = os_obs_warn_date
    h['os_obs_alert_date'] = os_obs_alert_date
    h['hw_obs_warn_date'] = hw_obs_warn_date
    h['hw_obs_alert_date'] = hw_obs_alert_date

    generic_insert('nodes', h.keys(), h.values())
    update_dash_node_not_updated(auth[1])
    update_dash_node_without_maintenance_end(auth[1])
    update_dash_node_without_asset(auth[1])

@auth_uuid
@service.xmlrpc
def res_action_batch(vars, vals, auth):
    generic_insert('SVCactions', vars, vals)

def _resmon_clean(node, svcname, vmname):
    if node is None or node == '':
        return 0
    if svcname is None or svcname == '':
        return 0
    q = db.resmon.nodename==node.strip("'")
    q &= db.resmon.svcname==svcname.strip("'")
    db(q).delete()
    db.commit()

@auth_uuid
@service.xmlrpc
def resmon_update(vars, vals, auth):
    _resmon_update(vars, vals)

def _resmon_update(vars, vals):
    if len(vals) == 0:
        return
    if isinstance(vals[0], list):
        for v in vals:
            __resmon_update(vars, v)
    else:
        __resmon_update(vars, vals)

def __resmon_update(vars, vals):
    h = {}
    for a,b in zip(vars, vals[0]):
        h[a] = b
    if 'nodename' in h and 'svcname' in h:
        nodename, vmname, vmtype = translate_encap_nodename(h['svcname'], h['nodename'])
        if nodename is not None:
            h['vmname'] = vmname
            h['nodename'] = nodename
        if 'vmname' not in h:
            h['vmname'] = ""
        _resmon_clean(h['nodename'], h['svcname'], h['vmname'])
    if len(vals) == 0:
        return
    idx = vars.index("res_status")
    if type(vals[0]) == list:
        for i, v in enumerate(vals):
            if v[idx] == "'None'":
                vals[i][idx] = "n/a"
    elif type(vals) == list:
        vals[idx] = "n/a"
    generic_insert('resmon', vars, vals)

@auth_uuid
@service.xmlrpc
def svcmon_update_combo(g_vars, g_vals, r_vars, r_vals, auth):
    feed_enqueue("_svcmon_update", g_vars, g_vals)
    feed_enqueue("_resmon_update", r_vars, r_vals)

@auth_uuid
@service.xmlrpc
def register_disks(vars, vals, auth):
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    for v in vals:
        _register_disk(vars, v, auth)

    nodename = auth[1].strip("'")

    # purge svcdisks
    sql = """ delete from svcdisks
              where
                disk_nodename = "%(nodename)s" and
                disk_updated < "%(now)s"
          """ % dict(nodename=nodename, now=now)
    db.executesql(sql)

    # purge diskinfo stubs
    sql = """ delete from diskinfo
              where
                (disk_arrayid = "%(nodename)s" or
                 disk_arrayid = "" or
                 disk_arrayid = "None" or
                 disk_arrayid is NULL) and
                disk_updated < "%(now)s"
          """ % dict(nodename=nodename, now=now)
    db.executesql(sql)

    db.commit()

@auth_uuid
@service.xmlrpc
def register_disk_blacklist(vars, vals, auth):
    generic_insert('disk_blacklist', vars, vals)

def disk_level(dev_id, level=0):
    q = db.diskinfo.disk_id == dev_id
    q &= db.diskinfo.disk_id != db.diskinfo.disk_devid
    rows = db(q).select(db.diskinfo.disk_devid)
    if len(rows) == 0:
        return level
    return disk_level(rows.first().disk_devid, level+1)

@auth_uuid
@service.xmlrpc
#def register_diskinfo(vars, vals, auth):
#    feed_enqueue("_register_diskinfo", vars, vals, auth)

def register_diskinfo(vars, vals, auth):
    if len(vals) == 0:
        return

    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)
    nodename = auth[1]
    vars.append("disk_updated")
    vars.append("disk_level")

    # insert diskinfo
    # here the array can be a cluster. the field contains the member list.
    # in this case, the node has to be added to the cluster members when the
    # disk id is already known in diskinfo
    arrays = set([])
    for val in vals:
        cluster = val[1]
        dev_id = val[2]
        val.append(now)
        val.append(str(disk_level(dev_id)))
        generic_insert('diskinfo', vars, val)

    # purge diskinfo
    sql = """ delete from diskinfo
              where
                disk_arrayid = "%(cluster)s" and
                disk_updated < "%(now)s"
          """ % dict(cluster=val[1], now=now)
    db.executesql(sql)

    # register cluster as array
    node = db(db.nodes.nodename==nodename).select().first()
    if node is not None:
        array_cache = node.mem_bytes
        array_firmware = " ".join((node.os_name, node.os_vendor, node.os_release, node.os_kernel))
    else:
        array_cache = 0
        array_firwmare = "unknown"

    vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
    vals = [
      cluster,
      "vdisk provider",
      str(array_cache),
      array_firmware,
      now
    ]
    generic_insert('stor_array', vars, vals)
    sql = """ delete from stor_array where array_name = "%s" and array_updated < "%s" """%(cluster, now)
    db.executesql(sql)
    db.commit()

@auth_uuid
@service.xmlrpc
def register_disk(vars, vals, auth):
    _register_disk(vars, vals, auth)

def _register_disk(vars, vals, auth):
    h = {}
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)
    for a,b in zip(vars, vals):
        h[a] = b

    disk_id = h["disk_id"].strip("'")
    disk_svcname = h["disk_svcname"].strip("'")
    disk_nodename = h["disk_nodename"].strip("'")

    if len(disk_svcname) == 0:
        # if no service name is provided and the node is actually
        # a service encpasulated vm, add the encapsulating svcname
        q = db.svcmon.mon_vmname == disk_nodename
        row = db(q).select().first()
        if row is not None:
            h["disk_svcname"] = repr(row.mon_svcname)

    # don't register blacklisted disks (might be VM disks, already accounted)
    #n = db(db.disk_blacklist.disk_id==disk_id).count()
    #if n > 0:
    #    purge_old_disks(h, now)
    #    return

    h['disk_updated'] = now

    q = db.diskinfo.disk_id==disk_id
    disks = db(q).select()
    n = len(disks)

    if n > 0:
        # diskinfo exists. is it a local or remote disk
        disk = disks.first()
        if disk.disk_arrayid == disk_nodename or \
           disk.disk_arrayid is None or \
           len(disk.disk_arrayid) == 0:
            # diskinfo registered as a stub for a local disk
            h['disk_local'] = 'T'

            if n == 1:
                # update diskinfo timestamp
                if disk.disk_arrayid is None:
                    array_id = 'NULL'
                else:
                    array_id = disk.disk_arrayid
                vars = ['disk_id', 'disk_arrayid', 'disk_updated']
                vals = [h["disk_id"], array_id, h['disk_updated']]
                generic_insert('diskinfo', vars, vals)
        else:
            # diskinfo registered by a array parser or an hv pushdisks
            h['disk_local'] = 'F'

    if disk_id.startswith(disk_nodename+'.') and n == 0:
        h['disk_local'] = 'T'
        vars = ['disk_id', 'disk_arrayid', 'disk_devid', 'disk_size']
        vals = [h["disk_id"],
                h['disk_nodename'],
                repr(disk_id.split('.')[-1]),
                h['disk_size']]
        generic_insert('diskinfo', vars, vals)
    elif n == 0:
        h['disk_local'] = 'F'
        vars = ['disk_id', 'disk_size']
        vals = [h["disk_id"], h['disk_size']]
        generic_insert('diskinfo', vars, vals)

        # if no array claimed that disk, give it to the node
        sql = """update diskinfo
                 set disk_arrayid="%s"
                 where
                   disk_id="%s" and
                   (disk_arrayid = "" or disk_arrayid is NULL)
              """%(h['disk_nodename'].strip("'"), disk_id)
        db.executesql(sql)
        db.commit()

    try:
        generic_insert('svcdisks', h.keys(), h.values())
    except:
        # the foreign key on svcdisk may prevent insertion if svcmon is not yet
        # populated
        pass
    purge_old_disks(h, now)

def purge_old_disks(h, now):
    if 'disk_nodename' in h and h['disk_nodename'] is not None and h['disk_nodename'] != '':
        q = db.svcdisks.disk_nodename==h['disk_nodename']
        q &= db.svcdisks.disk_updated<now
        db(q).delete()
        db.commit()

@auth_uuid
@service.xmlrpc
def register_sync(vars, vals, auth):
    pass

@auth_uuid
@service.xmlrpc
def register_ip(vars, vals, auth):
    pass

@auth_uuid
@service.xmlrpc
def register_fs(vars, vals, auth):
    pass

@auth_uuid
@service.xmlrpc
def insert_stats_fs_u(vars, vals, auth):
    generic_insert('stats_fs_u', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_cpu(vars, vals, auth):
    generic_insert('stats_cpu', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_mem_u(vars, vals, auth):
    generic_insert('stats_mem_u', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_proc(vars, vals, auth):
    generic_insert('stats_proc', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_swap(vars, vals, auth):
    generic_insert('stats_swap', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_block(vars, vals, auth):
    generic_insert('stats_block', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_blockdev(vars, vals, auth):
    generic_insert('stats_blockdev', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_netdev(vars, vals, auth):
    generic_insert('stats_netdev', vars, vals)

@auth_uuid
@service.xmlrpc
def insert_stats_netdev_err(vars, vals, auth):
    generic_insert('stats_netdev_err', vars, vals)

def get_vcpus(nodename, vmname):
    sql = """select mon_vcpus from svcmon where
               mon_nodname = "%s" and
               mon_vmname = "%s" """%(nodename, vmname)
    try:
        return db.executesql(sql)[0][0]
    except:
        return 1

@auth_uuid
@service.xmlrpc
def insert_stats(data, auth):
    import cPickle
    h = cPickle.loads(data)
    for stat in h:
        vars, vals = h[stat]
        if stat == "svc" and "cap_cpu" not in vars and len(vals) > 0:
            cache = {}
            vars.append("cap_cpu")
            for idx, k in enumerate(vars):
                if k == "svcname":
                    break
            for i, _vals in enumerate(vals):
                vmname = _vals[idx]
                if vmname in cache:
                    vcpus = cache[vmname]
                else:
                    vcpus = str(get_vcpus(auth[1], vmname))
                    cache[vmname] = vcpus
                vals[i].append(vcpus)
        max = 10000
        while len(vals) > max:
            generic_insert('stats_'+stat, vars, vals[:max])
            vals = vals[max:]
        generic_insert('stats_'+stat, vars, vals)
    feed_enqueue("update_dash_netdev_errors" , auth[1])

@auth_uuid
@service.xmlrpc
def insert_pkg(vars, vals, auth):
    feed_enqueue("_insert_pkg", vars, vals, auth)

def _insert_pkg(vars, vals, auth):
    now = datetime.datetime.now()
    if "pkg_updated" not in vars:
        vars.append("pkg_updated")
        for i, val in enumerate(vals):
            vals[i].append(str(now))
    threshold = now - datetime.timedelta(minutes=1)
    generic_insert('packages', vars, vals)
    nodename = auth[1].strip("'")
    delete_old_pkg(threshold, nodename)
    update_dash_pkgdiff(nodename)

def delete_old_pkg(threshold, nodename):
    q = db.packages.pkg_nodename == nodename
    q &= db.packages.pkg_updated < threshold
    db.commit()
    db(q).delete()
    db.commit()

def delete_old_patches(threshold, nodename):
    q = db.patches.patch_nodename == nodename
    q &= db.patches.patch_updated < threshold
    db.commit()
    db(q).delete()
    db.commit()

@auth_uuid
@service.xmlrpc
def insert_patch(vars, vals, auth):
    feed_enqueue("_insert_patch", vars, vals, auth)

def _insert_patch(vars, vals, auth):
    now = datetime.datetime.now()
    vars.append("patch_updated")
    for i, val in enumerate(vals):
        vals[i].append(str(now))
    threshold = now - datetime.timedelta(minutes=1)
    generic_insert('patches', vars, vals)
    nodename = auth[1].strip("'")
    delete_old_patches(threshold, nodename)

@auth_uuid
@service.xmlrpc
def update_hds(symid, vars, vals, auth):
    update_array_xml(symid, vars, vals, auth, "hds", insert_hds)

@auth_uuid
@service.xmlrpc
def update_sym_xml(symid, vars, vals, auth):
    update_array_xml(symid, vars, vals, auth, "symmetrix", insert_sym)

@auth_uuid
@service.xmlrpc
def update_eva_xml(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "eva", insert_eva)

@auth_uuid
@service.xmlrpc
def update_nsr(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "nsr", insert_nsr)

@auth_uuid
@service.xmlrpc
def update_netapp(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "netapp", insert_netapp)

@auth_uuid
@service.xmlrpc
def update_hp3par(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "hp3par", insert_hp3par)

@auth_uuid
@service.xmlrpc
def update_ibmsvc(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "ibmsvc", insert_ibmsvc)

@auth_uuid
@service.xmlrpc
def update_ibmds(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "ibmds", insert_ibmds)

@auth_uuid
@service.xmlrpc
def update_brocade(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "brocade", insert_brocade)

@auth_uuid
@service.xmlrpc
def update_vioserver(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "vioserver", insert_vioserver)

@auth_uuid
@service.xmlrpc
def update_necism(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "necism", insert_necism)

@auth_uuid
@service.xmlrpc
def update_dcs(name, vars, vals, auth):
    update_array_xml(name, vars, vals, auth, "dcs", insert_dcs)

def update_array_xml(arrayid, vars, vals, auth, subdir, fn):
    import os
    import codecs

    dir = 'applications'+str(URL(r=request,a='init', c='uploads',f=subdir))
    if not os.path.exists(dir):
        os.makedirs(dir)

    dir = os.path.join(dir, arrayid)
    if not os.path.exists(dir):
        os.makedirs(dir)

    for a,b in zip(vars, vals):
        a = os.path.join(dir, a)
        try:
            f = codecs.open(a, "w", "utf-8")
            f.write(b)
            f.sync()
            f.close()
        except:
            pass

    #fn(arrayid)
    feed_enqueue(fn.__name__, arrayid, auth[1])

    # stor_array_proxy
    insert_array_proxy(auth[1], arrayid)

    # clean up stor_array_*
    sql = "delete from stor_array_dg where array_id not in (select id from stor_array)"
    db.executesql(sql)

    sql = "delete from stor_array_tgtid where array_id not in (select id from stor_array)"
    db.executesql(sql)

    sql = "delete from stor_array_proxy where array_id not in (select id from stor_array)"
    db.executesql(sql)

    sql = "delete from stor_array_dg_quota where stor_array_dg_quota.dg_id not in (select id from stor_array_dg)"
    db.executesql(sql)

def insert_dcss():
    return insert_dcs()

def insert_array_proxy(nodename, array_name):
    sql = """select id from stor_array where array_name="%s" """%array_name
    rows = db.executesql(sql)
    if len(rows) == 0:
        return
    array_id = str(rows[0][0])

    vars = ['array_id', 'nodename']
    vals = [array_id, nodename]
    generic_insert('stor_array_proxy', vars, vals)

def insert_dcs(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import dcs
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='dcs'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        print d
        s = dcs.get_dcs(d)
        if s is None:
            print "error parsing data"
            continue

        # stor_array_proxy
        if nodename is not None:
            print " insert %s as proxy node"%nodename
            insert_array_proxy(nodename, s.sg['caption'])

        # stor_array
        vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
        vals = []
        name = s.sg['caption']
        for server in s.server.values():
            if len(server['model']) > 0:
                break
        vals.append([s.sg['caption'],
                     server['model'],
                     str(s.sg['memory']),
                     server['productbuild'],
                     now])
        generic_insert('stor_array', vars, vals)

        sql = """select id from stor_array where array_name="%s" """%name
        array_id = str(db.executesql(sql)[0][0])

        # stor_array_dg
        vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
        vals = []
        for dg in s.pool.values():
            vals.append([array_id,
                         dg['caption'],
                         str(dg['avail']),
                         str(dg['alloc']),
                         str(dg['total']),
                         now])
        generic_insert('stor_array_dg', vars, vals)
        sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
        db.executesql(sql)

        # stor_array_tgtid
        vars = ['array_id', 'array_tgtid']
        vals = []
        for wwn in s.port_list:
            vals.append([array_id, wwn])
        generic_insert('stor_array_tgtid', vars, vals)
        sql = """delete from stor_array_tgtid where array_id=%s and updated < "%s" """%(array_id, str(now))
        db.executesql(sql)

        # diskinfo
        vars = ['disk_id',
                'disk_arrayid',
                'disk_name',
                'disk_devid',
                'disk_size',
                'disk_alloc',
                'disk_raid',
                'disk_group',
                'disk_updated']
        vals = []
        for d in s.vdisk.values():
            for poolid in d['poolid']:
                vals.append([d['wwid'],
                             name,
                             d['caption'],
                             d['id'],
                             str(d['size']),
                             str(d['alloc']),
                             d['type'],
                             s.pool[poolid]['caption'],
                             now])
        generic_insert('diskinfo', vars, vals)
        sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(name, str(now))
        db.executesql(sql)

def insert_hdss():
    return insert_hds()

def insert_hds(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import hds
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='hds'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        s = hds.get_hds(d)
        if s is not None:
            # stor_array
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.name,
                         s.model,
                         str(s.cache),
                         s.firmware,
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.name
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for pname, dg in s.pool.items():
                vals.append([array_id,
                             dg['name'],
                             str(dg['free']),
                             str(dg['used']),
                             str(dg['size']),
                             now])
            generic_insert('stor_array_dg', vars, vals)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            vars = ['array_id', 'array_tgtid']
            vals = []
            for wwn in s.ports:
                vals.append([array_id, wwn])
            generic_insert('stor_array_tgtid', vars, vals)

            # diskinfo
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_devid',
                    'disk_size',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for d in s.vdisk:
                vals.append([d['wwid'],
                             s.name,
                             d['name'],
                             str(d['size']),
                             d['raid'],
                             d['disk_group'],
                             now])
            generic_insert('diskinfo', vars, vals)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.name, str(now))
            db.executesql(sql)


def insert_necisms():
    return insert_necism()

def insert_necism(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import necism
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='necism'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        s = necism.get_necism(d)
        if s is not None:
            # stor_array
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.name,
                         s.model,
                         str(s.cache),
                         s.firmware,
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.name
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for dg in s.pool:
                vals.append([array_id,
                             dg['name'],
                             str(dg['free']),
                             str(dg['used']),
                             str(dg['size']),
                             now])
            generic_insert('stor_array_dg', vars, vals)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            vars = ['array_id', 'array_tgtid']
            vals = []
            for wwn in s.ports:
                vals.append([array_id, wwn])
            generic_insert('stor_array_tgtid', vars, vals)

            # diskinfo
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_devid',
                    'disk_size',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for d in s.vdisk:
                vals.append([d['wwid'],
                             s.name,
                             d['name'],
                             str(d['size']),
                             d['raid'],
                             d['disk_group'],
                             now])
            generic_insert('diskinfo', vars, vals)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.name, str(now))
            db.executesql(sql)


def insert_brocades():
    return insert_brocade()

def insert_brocade(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import brocade
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='brocade'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    vars = ['sw_name',
            'sw_portname',
            'sw_index',
            'sw_slot',
            'sw_port',
            'sw_portspeed',
            'sw_portnego',
            'sw_portstate',
            'sw_porttype',
            'sw_rportname',
            'sw_updated']
    avars = ['cfg',
             'alias',
             'port',
             'updated']
    zvars = ['cfg',
             'zone',
             'port',
             'updated']
    for d in dirs:
        s = brocade.get_brocade(d)

        if s is None:
            print "get_brocade: %s is corrupted"%d
            continue

        # alias
        for cfg in s.alias:
            vals = []
            for alias, ports in s.alias[cfg].items():
                for port in ports:
                    vals.append([
                        cfg,
                        alias,
                        port,
                        now
                    ])
            generic_insert('san_zone_alias', avars, vals)
            sql = """delete from san_zone_alias where cfg="%s" and updated < "%s" """%(cfg, str(now))
            db.executesql(sql)

        # zones
        vals = []
        if s is None:
            continue
        if s.cfg is not None:
            for zone, ports in s.zone.items():
                for port in ports:
                    vals.append([
                        s.cfg,
                        zone,
                        port,
                        now
                    ])
            generic_insert('san_zone', zvars, vals)
            sql = """delete from san_zone where cfg="%s" and updated < "%s" """%(s.cfg, str(now))
            db.executesql(sql)

        # ports-portname
        vals = []
        for p in s.ports.values():
            vals.append([
                s.name,
                s.wwn,
                str(p['Index']),
                str(p['Slot']),
                str(p['Port']),
                str(p['Speed']),
                str(p['Nego']),
                str(p['State']),
                str(p['Type']),
                str(p['RemotePortName']),
                now
            ])
            for nse in p['nse']:
                if nse == p['RemotePortName']:
                    continue
                vals.append([
                    s.name,
                    s.wwn,
                    str(p['Index']),
                    str(p['Slot']),
                    str(p['Port']),
                    str(p['Speed']),
                    str(p['Nego']),
                    str(p['State']),
                    str(p['Type']),
                    nse,
                    now
                ])
        generic_insert('switches', vars, vals)
        sql = """delete from switches where sw_name="%s" and sw_updated < "%s" """%(s.name, str(now))
        db.executesql(sql)

def insert_vioservers():
    return insert_vioserver()

def insert_vioserver(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import vioserver
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='vioserver'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        s = vioserver.get_vioserver(d)
        if s is None:
            continue

        # stor_array
        vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
        vals = []
        vals.append([s.array_name,
                     s.modelnumber,
                     str(s.controllermainmemory),
                     s.firmwareversion,
                     now])
        generic_insert('stor_array', vars, vals)

        sql = """select id from stor_array where array_name="%s" """%s.array_name
        array_id = str(db.executesql(sql)[0][0])

        # diskinfo
        vars = ['disk_id',
                'disk_arrayid',
                'disk_devid',
                'disk_size',
                'disk_alloc',
                'disk_raid',
                'disk_group',
                'disk_level',
                'disk_updated']
        vals = []
        for d in s.vdisk:
            vals.append([d['did'],
                         s.array_name,
                         d['backingdevid'],
                         str(d['size']),
                         str(d['size']),
                         "",
                         "",
                         str(disk_level(d['backingdevid'])),
                         now])
        generic_insert('diskinfo', vars, vals)
        sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.array_name, str(now))
        db.executesql(sql)

        # svcdisks
        vars = ['disk_id',
                'disk_size',
                'disk_used',
                'disk_vendor',
                'disk_model',
                'disk_nodename']
        vals = []
        for d in s.pdisk.values():
            vals.append([d['wwid'],
                         d['size'],
                         d['size'],
                         d['vendor'],
                         d['model'],
                         s.array_name])
        generic_insert('svcdisks', vars, vals)
        sql = """delete from svcdisks where disk_nodename="%s" and disk_updated < "%s" """%(s.array_name, str(now))
        db.executesql(sql)


def insert_nsrs():
    return insert_nsr()

def insert_nsr(name=None, nodename=None):
    import glob
    import os
    import socket

    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='nsr'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    # load node ip cache
    sql = "select nodename, addr from node_ip"
    rows = db.executesql(sql)
    node_ip = {}
    for row in rows:
        node_ip[row[1]] = row[0]

    # load svc ip cache
    sql = """select svcname, res_desc from resmon where rid like "%ip#%" """
    rows = db.executesql(sql)
    svc_ip = {}
    for row in rows:
        try:
            addr = row[1].split('@')[0]
            a = socket.getaddrinfo(addr, None)
            ip = a[0][-1][0]
            svc_ip[ip] = row[0]
        except:
            continue

    # load svc mnt cache
    sql = """select svcname, nodename, res_desc from resmon where rid like "%fs#%" """
    rows = db.executesql(sql)
    svc_mnt = {}
    for row in rows:
        try:
            mnt = row[2].split('@')[1]
            svc_mnt[(row[1], mnt)] = row[0]
        except:
            continue

    # load app cache
    sql = """select svc_name, svc_app from services"""
    rows = db.executesql(sql)
    svc_app = {}
    for row in rows:
        svc_app[row[0]] = row[1]

    sql = """select nodename, project from nodes"""
    rows = db.executesql(sql)
    node_app = {}
    for row in rows:
        node_app[row[0]] = row[1]

    for d in dirs:
        server = os.path.basename(d)
        fpath = os.path.join(d, "mminfo")

        vars = ['save_server', 'save_nodename', 'save_svcname', 'save_name',
                'save_group', 'save_size', 'save_date', 'save_retention',
                'save_volume', 'save_level', 'save_id', 'save_app']
        vals = []

        with open(fpath, 'r') as f:
            lines = f.read().split('\n')

        i = 0
        for line in lines:
            l = line.split(';')
            if len(l) != 9:
                continue
            if l[6].endswith('.RO'):
                # nsr read-lonly device. don't import as it would
                # account twice the size.
                continue
            if l[0] in node_ip:
                nodename = node_ip[l[0]]
            else:
                nodename = l[0]
            if l[0] in svc_ip:
                svcname = svc_ip[l[0]]
            elif (nodename, l[1]) in svc_mnt:
                svcname = svc_mnt[(nodename, l[1])]
            else:
                svcname = ''
            if svcname != '' and svcname in svc_app:
                app = svc_app[svcname]
            elif nodename in node_app:
                app = node_app[nodename]
            else:
                app = ''
            vals.append([server, nodename, svcname]+l[1:]+[app])
            i += 1
            if i > 300:
                i = 0
                generic_insert('saves', vars, vals)
                vals = []
        generic_insert('saves', vars, vals)
        db.commit()

    purge_saves()
    update_save_checks()

def purge_saves():
    sql = """delete from saves where
             save_retention < now()"""
    db.executesql(sql)
    db.commit()

def update_save_checks():
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    sql = """
           insert into checks_live (chk_nodename, chk_svcname, chk_type, chk_updated, chk_value, chk_created, chk_instance)
             select
               checks_live.chk_nodename as chk_nodename,
               checks_live.chk_svcname as chk_svcname,
               "save",
               now(),
               1000000 as chk_value,
               now(),
               checks_live.chk_instance as chk_instance
             from
               checks_live
               left join saves on
                 checks_live.chk_nodename = saves.save_nodename and
                 (checks_live.chk_svcname = saves.save_svcname or saves.save_svcname = "" or checks_live.chk_svcname = "") and
                 checks_live.chk_instance = saves.save_name
             where
               checks_live.chk_type="fs_u" and
               checks_live.chk_instance not in ("/dev/shm", "/tmp", "/var/lib/xenstored", "/var/adm/crash", "/var/adm/ras/livedump") and
               saves.save_name is null
           on duplicate key update
             chk_updated=now(),
             chk_value=if(datediff(now(), saves.save_date) is null, 1000000, datediff(now(), saves.save_date))
          """
    db.executesql(sql)
    db.commit()

    sql = """
           insert into checks_live (chk_nodename, chk_svcname, chk_type, chk_updated, chk_value, chk_created, chk_instance)
             select
               saves.save_nodename as chk_nodename,
               saves.save_svcname as chk_svcname,
               "save",
               now(),
               datediff(now(), saves.save_date) as chk_value,
               now(),
               if (substring(saves.save_name, 1, 4) = "RMAN", substring_index(saves.save_name, '_', 1), saves.save_name) as chk_instance
             from
               saves
             where
               not substring(lower(saves.save_nodename),1,1) between '0' and '9' and
               saves.save_name not in ("/dev/shm", "/tmp", "/var/lib/xenstored", "/var/adm/crash", "/var/adm/ras/livedump", "bootstrap") and
               saves.save_name not like "index%"
             order by
               saves.save_date
           on duplicate key update
             chk_updated=now(),
             chk_value=datediff(now(), saves.save_date)
          """
    db.executesql(sql)
    db.commit()

    sql = """delete from checks_live
             where
               chk_type="save" and
               chk_updated < "%(now)s"
          """%dict(now=now)
    db.executesql(sql)
    db.commit()

    q = db.checks_live.chk_type == "save"
    checks = db(q).select()
    update_thresholds_batch(checks)

    update_dash_checks_all()


def insert_netapps():
    return insert_netapp()

def insert_netapp(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import netapp
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='netapp'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        s = netapp.get_netapp(d)
        if s is not None:
            # stor_array
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.array_name,
                         s.modelnumber,
                         str(s.controllermainmemory),
                         s.firmwareversion,
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.array_name
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for dg in s.dg:
                vals.append([array_id,
                             dg['name'],
                             str(dg['free_capacity']),
                             str(dg['capacity']-dg['free_capacity']),
                             str(dg['capacity']),
                             now])
            generic_insert('stor_array_dg', vars, vals)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            vars = ['array_id', 'array_tgtid']
            vals = []
            for wwn in s.ports:
                vals.append([array_id, wwn])
            generic_insert('stor_array_tgtid', vars, vals)

            # diskinfo
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_devid',
                    'disk_size',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for d in s.vdisk:
                vals.append([d['vdisk_UID'],
                             s.array_name,
                             d['name'],
                             str(d['capacity']),
                             d['type'],
                             d['mdisk_grp_name'],
                             now])
            generic_insert('diskinfo', vars, vals)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.array_name, str(now))
            db.executesql(sql)


def insert_hp3pars():
    return insert_hp3par()

def insert_hp3par(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import hp3par
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    raid_type = ["raid0", "raid1", "raid1", "raid5", "raid6"]
    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='hp3par'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        s = hp3par.get_hp3par(d)
        if s is not None:
            # stor_array
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.name,
                         "",
                         "",
                         "",
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.name
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for dg in s.cpgs["members"]:
                sdu = dg["SDUsage"]
                vals.append([array_id,
                             dg['name'],
                             str(sdu["totalMiB"]-sdu["usedMiB"]),
                             str(sdu["usedMiB"]),
                             str(sdu["totalMiB"]),
                             now])
            generic_insert('stor_array_dg', vars, vals)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            vars = ['array_id', 'array_tgtid']
            vals = []
            for wwn in s.ports:
                vals.append([array_id, wwn])
            generic_insert('stor_array_tgtid', vars, vals)

            # diskinfo
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_name',
                    'disk_devid',
                    'disk_size',
                    'disk_alloc',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for d in s.volumes["members"]:
                t = ""
                for cpg in s.cpgs["members"]:
                    if cpg["name"] != d['userCPG']:
                        continue
                    try:
                        t = cpg["SDGrowth"]["LDLayout"]["RAIDType"]
                    except KeyError:
                        t = 0
                    t = raid_type[t]
                vals.append([d['wwn'].lower(),
                             s.name,
                             d['name'],
                             d['uuid'],
                             str(d['sizeMiB']),
                             str(d['userSpace']['usedMiB']),
                             t,
                             d['userCPG'],
                             now])
            generic_insert('diskinfo', vars, vals)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.name, str(now))
            db.executesql(sql)


def insert_ibmdss():
    return insert_ibmds()

def insert_ibmds(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import ibmds
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='ibmds'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        s = ibmds.get_ibmds(d)
        if s is not None:
            # stor_array
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.si['ID'],
                         s.si['Model'],
                         '0',
                         '',
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.si['ID']
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for dg in s.dg:
                usedpct = int(dg['%allocated'])
                vals.append([array_id,
                             dg['Name'],
                             str(dg['availstor']),
                             '1',
                             '1',
                             now])
            generic_insert('stor_array_dg', vars, vals)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            vars = ['array_id', 'array_tgtid']
            vals = []
            for ioport in s.ioport:
                vals.append([array_id, ioport['WWPN'].lower()])
            generic_insert('stor_array_tgtid', vars, vals)

            # diskinfo
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_devid',
                    'disk_name',
                    'disk_size',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for d in s.vdisk:
                vals.append([d['wwid'],
                             s.si['ID'],
                             d['ID'],
                             d['Name'],
                             str(d['cap']),
                             d['Raid'],
                             d['PoolName'],
                             now])
            generic_insert('diskinfo', vars, vals)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.si['ID'], str(now))
            db.executesql(sql)
            db.commit()

def insert_ibmsvcs():
    return insert_ibmsvc()

def insert_ibmsvc(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import ibmsvc
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='ibmsvc'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))

    for d in dirs:
        s = ibmsvc.get_ibmsvc(d)
        if s is not None:
            # stor_array
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.array_name,
                         s.modelnumber,
                         str(s.controllermainmemory),
                         s.firmwareversion,
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.array_name
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for dg in s.dg:
                vals.append([array_id,
                             dg['name'],
                             str(dg['free_capacity']),
                             str(dg['capacity']-dg['free_capacity']),
                             str(dg['capacity']),
                             now])
            generic_insert('stor_array_dg', vars, vals)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            vars = ['array_id', 'array_tgtid']
            vals = []
            for wwn in s.ports:
                vals.append([array_id, wwn])
            generic_insert('stor_array_tgtid', vars, vals)

            # diskinfo
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_devid',
                    'disk_size',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for d in s.vdisk:
                vals.append([d['vdisk_UID'],
                             s.array_name,
                             d['name'],
                             str(d['capacity']),
                             d['type'],
                             d['mdisk_grp_name'],
                             now])
            generic_insert('diskinfo', vars, vals)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.array_name, str(now))
            db.executesql(sql)


def insert_evas():
    return insert_eva()

def insert_eva(name=None, nodename=None):
    import glob
    import os
    from applications.init.modules import eva
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='eva'))
    if name is None:
        pattern = "*"
    else:
        pattern = name
    dirs = glob.glob(os.path.join(dir, pattern))
    evas = []

    for d in dirs:
        s = eva.get_eva(d)
        if s is not None:
            # stor_array
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.name,
                         s.modelnumber,
                         str(s.controllermainmemory),
                         s.firmwareversion,
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.name
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for dg in s.dg:
                vals.append([array_id,
                             dg['diskgroupname'],
                             str(dg['freestoragespace']),
                             str(dg['usedstoragespace']),
                             str(dg['totalstoragespace']),
                             now])
            generic_insert('stor_array_dg', vars, vals)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            vars = ['array_id', 'array_tgtid']
            vals = []
            for wwn in s.ports:
                vals.append([array_id, wwn])
            generic_insert('stor_array_tgtid', vars, vals)

            # diskinfo
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_name',
                    'disk_devid',
                    'disk_size',
                    'disk_alloc',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for d in s.vdisk.values():
                vals.append([d['wwlunid'],
                             s.name,
                             d['objectname'],
                             d['objectid'],
                             str(d['allocatedcapacity']),
                             str(d['alloc']),
                             d['redundancy'],
                             d['diskgroupname'],
                             now])
            generic_insert('diskinfo', vars, vals)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.name, str(now))
            db.executesql(sql)


def insert_syms():
    return insert_sym()

def insert_sym(symid=None, nodename=None):
    import glob
    import os
    from applications.init.modules import symmetrix
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)

    dir = 'applications'+str(URL(r=request,a='init',c='uploads',f='symmetrix'))
    if symid is None:
        pattern = "[0-9]*"
    else:
        pattern = symid
    sym_dirs = glob.glob(os.path.join(dir, pattern))
    syms = []

    for d in sym_dirs:
        s = symmetrix.get_sym(d)
        if s is not None:
            # stor_array
            s.get_sym_info()
            vars = ['array_name', 'array_model', 'array_cache', 'array_firmware', 'array_updated']
            vals = []
            vals.append([s.info['symid'],
                         s.info['model'],
                         s.info['cache_megabytes'],
                         '.'.join((s.info['version'],
                                   s.info['patch_level'],
                                   s.info['symmwin_version'])),
                         now])
            generic_insert('stor_array', vars, vals)

            sql = """select id from stor_array where array_name="%s" """%s.info['symid']
            array_id = str(db.executesql(sql)[0][0])

            # stor_array_dg
            s.get_sym_diskgroup()
            vars = ['array_id', 'dg_name', 'dg_free', 'dg_used', 'dg_size', 'dg_updated']
            vals = []
            for dg in s.diskgroup.values():
                vals.append([array_id,
                             dg.info['disk_group_name'],
                             str(dg.total-dg.used),
                             str(dg.used),
                             str(dg.total),
                             now])
            generic_insert('stor_array_dg', vars, vals)
            del(s.diskgroup)
            sql = """delete from stor_array_dg where array_id=%s and dg_updated < "%s" """%(array_id, str(now))
            db.executesql(sql)

            # stor_array_tgtid
            s.get_sym_director()
            vars = ['array_id', 'array_tgtid']
            vals = []
            for dir in s.director.values():
                for wwn in dir.port_wwn:
                    vals.append([array_id, wwn])
            generic_insert('stor_array_tgtid', vars, vals)
            del(s.director)

            # diskinfo
            s.get_sym_dev()
            vars = ['disk_id',
                    'disk_arrayid',
                    'disk_devid',
                    'disk_size',
                    'disk_alloc',
                    'disk_raid',
                    'disk_group',
                    'disk_updated']
            vals = []
            for dev in s.dev.values():
                if dev.flags['meta'] not in ('Head', 'None'):
                    continue
                vals.append([dev.wwn,
                             s.info['symid'],
                             dev.info['dev_name'],
                             str(dev.megabytes),
                             str(dev.alloc),
                             "Meta-%d %s"%(dev.meta_count, dev.info['configuration']),
                             dev.diskgroup_name,
                             now])
            generic_insert('diskinfo', vars, vals)
            del(s.dev)
            sql = """delete from diskinfo where disk_arrayid="%s" and disk_updated < "%s" """%(s.info['symid'], str(now))
            db.executesql(sql)

            del(s)

@auth_uuid
@service.xmlrpc
def delete_pkg(node, auth):
    pass

@auth_uuid
@service.xmlrpc
def delete_patch(node, auth):
    pass

@auth_uuid
@service.xmlrpc
def delete_syncs(svcname, auth):
    pass

@auth_uuid
@service.xmlrpc
def delete_ips(svcname, node, auth):
    pass

@auth_uuid
@service.xmlrpc
def delete_fss(svcname, auth):
    pass

@auth_uuid
@service.xmlrpc
def delete_disks(svcname, node, auth):
    if svcname is None or svcname == '':
        return 0
    db((db.svcdisks.disk_svcname==svcname)&(db.svcdisks.disk_nodename==node)).delete()
    db.commit()

@service.xmlrpc
def register_node(node):
    if node is None or node == '':
        return ["no node name provided"]
    q = db.auth_node.nodename == node
    rows = db(q).select()
    if len(rows) != 0:
        _log("node.register",
             "node '%(node)s' double registration attempt",
             dict(node=node),
             nodename=node,
             level="warning")
        return ["already registered"]
    import uuid
    u = str(uuid.uuid4())
    db.auth_node.insert(nodename=node, uuid=u)
    db.commit()
    _log("node.register",
         "node '%(node)s' registered",
         dict(node=node),
         nodename=node)
    return u

@auth_uuid
@service.xmlrpc
def svcmon_update(vars, vals, auth):
    feed_enqueue("_svcmon_update", vars, vals)

def _svcmon_update(vars, vals):
    if len(vals) == 0:
        return
    if isinstance(vals[0], list):
        for v in vals:
            _svcmon_update(vars, v)
    else:
        __svcmon_update(vars, vals)

def compute_availstatus(h):
    def status_merge_down(s):
        if s == 'up': return 'warn'
        elif s == 'down': return 'down'
        elif s == 'stdby down': return 'stdby down'
        elif s == 'stdby up': return 'stdby up with down'
        elif s == 'stdby up with up': return 'warn'
        elif s == 'stdby up with down': return 'stdby up with down'
        elif s in ['undef', 'n/a']: return 'down'
        else: return 'undef'

    def status_merge_up(s):
        if s == 'up': return 'up'
        elif s == 'down': return 'warn'
        elif s == 'stdby down': return 'warn'
        elif s == 'stdby up': return 'stdby up with up'
        elif s == 'stdby up with up': return 'stdby up with up'
        elif s == 'stdby up with down': return 'warn'
        elif s in ['undef', 'n/a']: return 'up'
        else: return 'undef'

    def status_merge_stdby_up(s):
        if s == 'up': return 'stdby up with up'
        elif s == 'down': return 'stdby up with down'
        elif s == 'stdby down': return 'warn'
        elif s == 'stdby up': return 'stdby up'
        elif s == 'stdby up with up': return 'stdby up with up'
        elif s == 'stdby up with down': return 'stdby up with down'
        elif s in ['undef', 'n/a']: return 'stdby up'
        else: return 'undef'

    def status_merge_stdby_down(s):
        if s == 'up': return 'stdby down with up'
        elif s == 'down': return 'stdby down'
        elif s == 'stdby down': return 'stdby down'
        elif s == 'stdby up': return 'warn'
        elif s == 'stdby up with up': return 'warn'
        elif s == 'stdby up with down': return 'warn'
        elif s in ['undef', 'n/a']: return 'stdby down'
        else: return 'undef'

    s = 'undef'
    for sn in ['mon_containerstatus',
              'mon_ipstatus',
              'mon_fsstatus',
              'mon_sharestatus',
              'mon_appstatus',
              'mon_diskstatus']:
        if sn not in h:
            h[sn] = 'n/a'
        if h[sn] in ['warn', 'todo']: return 'warn'
        elif h[sn] == 'undef': return 'undef'
        elif h[sn] == 'n/a':
            if s == 'undef': s = 'n/a'
            else: continue
        elif h[sn] == 'up': s = status_merge_up(s)
        elif h[sn] == 'down': s = status_merge_down(s)
        elif h[sn] == 'stdby up': s = status_merge_stdby_up(s)
        elif h[sn] == 'stdby down': s = status_merge_stdby_down(s)
        else: return 'undef'
    if s == 'stdby up with up':
        s = 'up'
    elif s == 'stdby up with down':
        s = 'stdby up'
    return s

def svc_status_update(svcname):
    """ avail and overall status can be:
        up, down, stdby up, stdby down, warn, undef
    """
    q = db.svcmon.mon_svcname == svcname
    rows = db(q).select(db.svcmon.mon_overallstatus,
                        db.svcmon.mon_availstatus,
                        db.svcmon.mon_updated,
                        db.svcmon.mon_svctype,
                        db.svcmon.mon_frozen)

    tlim = datetime.datetime.now() - datetime.timedelta(minutes=15)
    ostatus_l = [r.mon_overallstatus for r in rows if r.mon_updated is not None and r.mon_updated > tlim]
    astatus_l = [r.mon_availstatus for r in rows if r.mon_updated is not None and r.mon_updated > tlim]
    n_trusted_nodes = len(ostatus_l)
    n_nodes = len(rows)
    ostatus_l = set(ostatus_l)
    astatus_l = set(astatus_l)

    ostatus = 'undef'
    astatus = 'undef'

    if 'up' in astatus_l:
        astatus = 'up'
    elif n_trusted_nodes == 0:
        astatus = 'undef'
    else:
        if astatus_l == set(['n/a']):
            astatus = 'n/a'
        elif 'warn' in astatus_l:
            astatus = 'warn'
        else:
            astatus = 'down'

    if n_trusted_nodes < n_nodes:
        ostatus = 'warn'
    elif n_trusted_nodes == 0:
        ostatus = 'undef'
    elif 'warn' in ostatus_l or \
         'stdby down' in ostatus_l or \
         'undef' in ostatus_l:
        ostatus = 'warn'
    elif set(['up']) == ostatus_l or \
         set(['up', 'down']) == ostatus_l or \
         set(['up', 'stdby up']) == ostatus_l or \
         set(['up', 'down', 'stdby up']) == ostatus_l or \
         set(['up', 'down', 'stdby up', 'n/a']) == ostatus_l:
        ostatus = 'up'
    elif set(['down']) == ostatus_l or \
         set(['down', 'stdby up']) == ostatus_l or \
         set(['down', 'stdby up', 'n/a']) == ostatus_l:
        ostatus = 'down'
    else:
        ostatus = 'undef'

    svc_log_update(svcname, astatus)
    try:
        svctype = rows[0].mon_svctype
    except:
        svctype = 'TST'
    update_dash_service_unavailable(svcname, svctype, astatus)
    update_dash_service_available_but_degraded(svcname, svctype, astatus, ostatus)

    db(db.services.svc_name==svcname).update(
      svc_status=ostatus,
      svc_availstatus=astatus)
    db.commit()

def svc_log_update(svcname, astatus):
    q = db.services_log.svc_name == svcname
    o = ~db.services_log.id
    rows = db(q).select(orderby=o, limitby=(0,1))
    end = datetime.datetime.now()
    if len(rows) == 1:
        prev = rows[0]
        if prev.svc_availstatus == astatus:
            id = prev.id
            q = db.services_log.id == id
            db(q).update(svc_end=end)
            db.commit()
        else:
            db.services_log.insert(svc_name=svcname,
                                   svc_begin=prev.svc_end,
                                   svc_end=end,
                                   svc_availstatus=astatus)
            db.commit()
    else:
        db.services_log.insert(svc_name=svcname,
                               svc_begin=end,
                               svc_end=end,
                               svc_availstatus=astatus)
        db.commit()

def translate_encap_nodename(svcname, nodename):
    q = db.svcmon.mon_vmname == nodename
    q &= db.svcmon.mon_svcname == svcname
    rows = db(q).select(db.svcmon.mon_nodname,
                        db.svcmon.mon_vmname,
                        db.svcmon.mon_vmtype,
                        db.svcmon.mon_containerstatus)

    if len(rows) == 0:
        # not encap
        return None, None, None

    for row in rows:
        if row.mon_containerstatus in ('up', 'stdby up', 'n/a'):
            return row.mon_nodname, row.mon_vmname, row.mon_vmtype

    row = rows.first()
    return row.mon_nodname, row.mon_vmname, row.mon_vmtype

def __svcmon_update(vars, vals):
    # don't trust the server's time
    h = {}
    for a,b in zip(vars, vals):
        if a == 'mon_updated':
            continue
        h[a] = b

    nodename, vmname, vmtype = translate_encap_nodename(h['mon_svcname'], h['mon_nodname'])

    if 'mon_containerpath' in h and nodename is None:
        # update container info only
        generic_insert('svcmon', vars, vals)
        return

    if 'mon_vmname' not in h:
        # COMPAT: old mono-container agent. fetch vmname from svcmon.
        q = db.svcmon.mon_svcname == h['mon_svcname']
        q &= db.svcmon.mon_nodname == h['mon_nodname']
        q &= db.svcmon.mon_vmname != None
        q &= db.svcmon.mon_vmname != ""
        row = db(q).select(db.svcmon.mon_vmname).first()
        if row is not None:
            h['mon_vmname'] = row.mon_vmname
        q = db.services.svc_name == h['mon_svcname']
        row = db(q).select(db.services.svc_containertype).first()
        if row is not None:
            h['mon_vmtype'] = row.svc_containertype

    if nodename is not None:
        h['mon_vmname'] = vmname
        h['mon_vmtype'] = vmtype
        h['mon_nodname'] = nodename

    if 'mon_vmname' in h and h['mon_vmname'] is not None and len(h['mon_vmname']) > 0:
        q = db.nodes.nodename == h['mon_vmname']
        db(q).update(hv=h['mon_nodname'])

    now = datetime.datetime.now()
    tmo = now - datetime.timedelta(minutes=15)
    h['mon_updated'] = now
    if 'mon_hbstatus' not in h:
        h['mon_hbstatus'] = 'undef'
    if 'mon_sharestatus' not in h:
        h['mon_sharestatus'] = 'undef'
    if 'mon_availstatus' not in h:
        h['mon_availstatus'] = compute_availstatus(h)
    generic_insert('svcmon', h.keys(), h.values())
    svc_status_update(h['mon_svcname'])
    update_dash_service_frozen(h['mon_svcname'], h['mon_nodname'], h['mon_svctype'], h['mon_frozen'])
    update_dash_service_not_on_primary(h['mon_svcname'], h['mon_nodname'], h['mon_svctype'], h['mon_availstatus'])
    update_dash_svcmon_not_updated(h['mon_svcname'], h['mon_nodname'])

    sql = """select svc_cluster_type from services where svc_name="%s" """
    rows = db.executesql(sql, as_dict=True)
    if len(rows) > 0 and row[0]['svc_cluster_type'] == 'flex':
        update_dash_flex_instances_started(h['mon_svcname'])
        update_dash_flex_cpu(h['mon_svcname'])

    query = db.svcmon_log.mon_svcname==h['mon_svcname']
    query &= db.svcmon_log.mon_nodname==h['mon_nodname']
    last = db(query).select(orderby=~db.svcmon_log.id, limitby=(0,1))
    if len(last) == 0:
        _vars = ['mon_begin',
                 'mon_end',
                 'mon_svcname',
                 'mon_nodname',
                 'mon_overallstatus',
                 'mon_availstatus',
                 'mon_ipstatus',
                 'mon_fsstatus',
                 'mon_diskstatus',
                 'mon_sharestatus',
                 'mon_containerstatus',
                 'mon_appstatus',
                 'mon_syncstatus',
                 'mon_hbstatus']
        _vals = [h['mon_updated'],
                 h['mon_updated'],
                 h['mon_svcname'],
                 h['mon_nodname'],
                 h['mon_overallstatus'],
                 h['mon_availstatus'],
                 h['mon_ipstatus'],
                 h['mon_fsstatus'],
                 h['mon_diskstatus'],
                 h['mon_sharestatus'],
                 h['mon_containerstatus'],
                 h['mon_appstatus'],
                 h['mon_syncstatus'],
                 h['mon_hbstatus']]
        generic_insert('svcmon_log', _vars, _vals)
        if h['mon_overallstatus'] == 'warn':
            level = "warning"
        else:
            level = "info"
        _websocket_send(json.dumps({
                     'nodename': h['mon_nodname'],
                     'svcname': h['mon_svcname'],
                     'table': 'svcmon',
                     'event': 'change'
                    }))
        _log("service.status",
             "service '%(svc)s' state initialized on '%(node)s': avail(%(a1)s=>%(a2)s) overall(%(o1)s=>%(o2)s)",
             dict(
               svc=h['mon_svcname'],
               node=h['mon_nodname'],
               a1="none",
               a2=h['mon_availstatus'],
               o1="none",
               o2=h['mon_overallstatus']),
             svcname=h['mon_svcname'],
             nodename=h['mon_nodname'],
             level=level)
    elif last[0].mon_end < tmo:
        _vars = ['mon_begin',
                 'mon_end',
                 'mon_svcname',
                 'mon_nodname',
                 'mon_overallstatus',
                 'mon_availstatus',
                 'mon_ipstatus',
                 'mon_fsstatus',
                 'mon_diskstatus',
                 'mon_sharestatus',
                 'mon_containerstatus',
                 'mon_appstatus',
                 'mon_syncstatus',
                 'mon_hbstatus']
        _vals = [last[0].mon_end,
                 h['mon_updated'],
                 h['mon_svcname'],
                 h['mon_nodname'],
                 "undef",
                 "undef",
                 "undef",
                 "undef",
                 "undef",
                 "undef",
                 "undef",
                 "undef",
                 "undef",
                 "undef"]
        generic_insert('svcmon_log', _vars, _vals)
        _vars = ['mon_begin',
                 'mon_end',
                 'mon_svcname',
                 'mon_nodname',
                 'mon_overallstatus',
                 'mon_availstatus',
                 'mon_ipstatus',
                 'mon_fsstatus',
                 'mon_diskstatus',
                 'mon_sharestatus',
                 'mon_containerstatus',
                 'mon_appstatus',
                 'mon_syncstatus',
                 'mon_hbstatus']
        _vals = [h['mon_updated'],
                 h['mon_updated'],
                 h['mon_svcname'],
                 h['mon_nodname'],
                 h['mon_overallstatus'],
                 h['mon_availstatus'],
                 h['mon_ipstatus'],
                 h['mon_fsstatus'],
                 h['mon_diskstatus'],
                 h['mon_sharestatus'],
                 h['mon_containerstatus'],
                 h['mon_appstatus'],
                 h['mon_hbstatus'],
                 h['mon_syncstatus']]
        generic_insert('svcmon_log', _vars, _vals)
        if h['mon_overallstatus'] == 'warn':
            level = "warning"
        else:
            level = "info"
        _websocket_send({'nodename': h['mon_nodname'],
                     'svcname': h['mon_svcname'],
                     'table': 'svcmon',
                     'event': 'change'})
        _log("service.status",
             "service '%(svc)s' state changed on '%(node)s': avail(%(a1)s=>%(a2)s) overall(%(o1)s=>%(o2)s)",
             dict(
               svc=h['mon_svcname'],
               node=h['mon_nodname'],
               a1="undef",
               a2=h['mon_availstatus'],
               o1="undef",
               o2=h['mon_overallstatus']),
             svcname=h['mon_svcname'],
             nodename=h['mon_nodname'],
             level=level)
    elif h['mon_overallstatus'] != last[0].mon_overallstatus or \
         h['mon_availstatus'] != last[0].mon_availstatus:
        _vars = ['mon_begin',
                 'mon_end',
                 'mon_svcname',
                 'mon_nodname',
                 'mon_overallstatus',
                 'mon_availstatus',
                 'mon_ipstatus',
                 'mon_fsstatus',
                 'mon_diskstatus',
                 'mon_sharestatus',
                 'mon_containerstatus',
                 'mon_appstatus',
                 'mon_syncstatus',
                 'mon_hbstatus']
        _vals = [h['mon_updated'],
                 h['mon_updated'],
                 h['mon_svcname'],
                 h['mon_nodname'],
                 h['mon_overallstatus'],
                 h['mon_availstatus'],
                 h['mon_ipstatus'],
                 h['mon_fsstatus'],
                 h['mon_diskstatus'],
                 h['mon_sharestatus'],
                 h['mon_containerstatus'],
                 h['mon_appstatus'],
                 h['mon_syncstatus'],
                 h['mon_hbstatus']]
        generic_insert('svcmon_log', _vars, _vals)
        db(db.svcmon_log.id==last[0].id).update(mon_end=h['mon_updated'])
        db.commit()
        if h['mon_overallstatus'] == 'warn':
            level = "warning"
        else:
            level = "info"
        _websocket_send({'nodename': h['mon_nodname'],
                     'svcname': h['mon_svcname'],
                     'table': 'svcmon',
                     'event': 'change'})
        _log("service.status",
             "service '%(svc)s' state changed on '%(node)s': avail(%(a1)s=>%(a2)s) overall(%(o1)s=>%(o2)s)",
             dict(
               svc=h['mon_svcname'],
               node=h['mon_nodname'],
               a1=last[0].mon_availstatus,
               a2=h['mon_availstatus'],
               o1=last[0].mon_overallstatus,
               o2=h['mon_overallstatus']),
             svcname=h['mon_svcname'],
             nodename=h['mon_nodname'],
             level=level)
    else:
        db(db.svcmon_log.id==last[0].id).update(mon_end=h['mon_updated'])
        db.commit()


#
# collector actions
#
def str_to_datetime(s):
    time_formats = ["%Y-%m-%d %H:%M:%S","%Y-%m-%d %H:%M","%Y-%m-%d", "%Y-%m"]
    d = None
    for t in time_formats:
       try:
           d = datetime.datetime.fromtimestamp(time.mktime(time.strptime(s, t)))
           break
       except:
           continue
    return d

@auth_uuid
@service.xmlrpc
def collector_ack_action(cmd, auth):
    d = {}
    nodename = auth[1]
    d["acked_date"] = datetime.datetime.now()

    if "svcname" in cmd:
        q = db.SVCactions.svcname == cmd["svcname"]
        q &= db.SVCactions.hostname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}
        d["svcname"] = cmd["svcname"]

    if "id" not in cmd:
        return {"ret": 1, "msg": "no action id specified"}

    if "comment" not in cmd:
        d["acked_comment"] = "no comment"
    else:
        d["acked_comment"] = cmd["comment"]

    if "author" not in cmd:
        d["acked_by"] = "root@%s"%nodename
    else:
        d["acked_by"] = cmd["author"]

    q = db.SVCactions.status == "err"

    q1 = db.SVCactions.id == cmd['id']
    rows = db(q1).select()

    if len(rows) == 0:
        q &= q1
    else:
        if rows[0].status_log is None or rows[0].status_log == "":
            q &= db.SVCactions.hostname == rows[0].hostname
            q &= db.SVCactions.svcname == rows[0].svcname
            q &= ((db.SVCactions.pid.belongs(rows[0].pid.split(',')))|(db.SVCactions.id==rows[0].id))
            q &= db.SVCactions.begin >= rows[0].begin
            q &= db.SVCactions.end <= rows[0].end
        else:
            q &= q1

    if db(q).count() == 0:
        return {"ret": 1, "msg": "action id not found or not ackable"}

    db(q).update(ack=1,
                 acked_comment=d["acked_comment"],
                 acked_date=d["acked_date"],
                 acked_by=d["acked_by"])
    db.commit()

    update_action_errors(rows[0].svcname, nodename)
    update_dash_action_errors(rows[0].svcname, nodename)

    return {"ret": 0, "msg": ""}

@auth_uuid
@service.xmlrpc
def collector_ack_unavailability(cmd, auth):
    d = {}
    nodename = auth[1]
    d["mon_acked_on"] = datetime.datetime.now()

    if "svcname" not in cmd:
        return {"ret": 1, "msg": "svcname not found in command block"}
    else:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}
        d["mon_svcname"] = cmd["svcname"]

    if "begin" not in cmd:
        d["mon_begin"] = d["mon_acked_on"]
    else:
        d["mon_begin"] = str_to_datetime(cmd["begin"])
        if d["mon_begin"] is None:
            return {"ret": 1, "msg": "could not parse --begin as a date"}

    if "end" not in cmd:
        if "duration" in cmd:
            # todo: fancy duration parsing
            d["mon_end"] = d["mon_begin"] + datetime.timedelta(minutes=cmd["duration"])
        else:
            return {"ret": 1, "msg": "need either --end or --duration"}
    else:
        d["mon_end"] = str_to_datetime(cmd["end"])
        if d["mon_end"] is None:
            return {"ret": 1, "msg": "could not parse --end as a date"}

    if "comment" not in cmd:
        d["mon_comment"] = "no comment"
    else:
        d["mon_comment"] = cmd["comment"]

    if "author" not in cmd:
        d["mon_acked_by"] = "root@%s"%nodename
    else:
        d["mon_acked_by"] = cmd["author"]

    if "account" not in cmd:
        d["mon_account"] = "1"
    else:
        d["mon_account"] = cmd["account"]

    generic_insert('svcmon_log_ack', d.keys(), d.values())
    return {"ret": 0, "msg": ""}

@auth_uuid
@service.xmlrpc
def collector_list_unavailability_ack(cmd, auth):
    d = {}
    nodename = auth[1]
    d["mon_acked_on"] = datetime.datetime.now()

    if "svcname" not in cmd:
        return {"ret": 1, "msg": "svcname not found in command block"}
    else:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    q = db.svcmon_log_ack.mon_svcname == cmd["svcname"]

    if "begin" not in cmd:
        b = datetime.datetime.now() - datetime.timedelta(days=7)
    else:
        b = str_to_datetime(cmd["begin"])
        if b is None:
            return {"ret": 1, "msg": "could not parse --begin as a date"}
    q &= db.svcmon_log_ack.mon_end >= b

    if "end" not in cmd:
        e = datetime.datetime.now()
    else:
        e = str_to_datetime(cmd["end"])
        if e is None:
            return {"ret": 1, "msg": "could not parse --end as a date"}
    q &= db.svcmon_log_ack.mon_begin <= e

    if "comment" in cmd:
        if '%' in cmd["comment"]:
            q &= db.svcmon_log_ack.mon_comment.like(cmd["comment"])
        else:
            q &= db.svcmon_log_ack.mon_comment == cmd["comment"]

    if "author" in cmd:
        if '%' in cmd["author"]:
            q &= db.svcmon_log_ack.mon_acked_by.like(cmd["author"])
        else:
            q &= db.svcmon_log_ack.mon_acked_by == cmd["author"]

    if "account" in cmd:
        if cmd["account"]:
            q &= db.svcmon_log_ack.mon_account == 0
        else:
            q &= db.svcmon_log_ack.mon_account == 1

    rows = db(q).select()
    return {"ret": 0, "msg": "", "data":str(rows)}

@auth_uuid
@service.xmlrpc
def collector_show_actions(cmd, auth):
    d = {}
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        q = db.SVCactions.svcname == cmd["svcname"]
    else:
        q = db.SVCactions.hostname == nodename

    if "id" in cmd:
        q1 = db.SVCactions.id == cmd['id']
        rows = db(q1).select()
        if len(rows) == 0:
            q &= q1
        else:
            if rows[0].status_log is None or rows[0].status_log == "":
                q &= db.SVCactions.hostname == rows[0].hostname
                q &= db.SVCactions.svcname == rows[0].svcname
                q &= ((db.SVCactions.pid.belongs(rows[0].pid.split(',')))|(db.SVCactions.id==rows[0].id))
                q &= db.SVCactions.begin >= rows[0].begin
                q &= db.SVCactions.end <= rows[0].end
            else:
                q &= q1
    else:
        if "begin" not in cmd:
            b = datetime.datetime.now() - datetime.timedelta(days=7)
        else:
            b = str_to_datetime(cmd["begin"])
            if b is None:
                return {"ret": 1, "msg": "could not parse --begin as a date"}
        q &= db.SVCactions.end >= b

        if "end" not in cmd:
            e = datetime.datetime.now()
        else:
            e = str_to_datetime(cmd["end"])
            if e is None:
                return {"ret": 1, "msg": "could not parse --end as a date"}
        q &= db.SVCactions.begin <= e

    rows = db(q).select(db.SVCactions.id,
                        db.SVCactions.hostname,
                        db.SVCactions.svcname,
                        db.SVCactions.begin,
                        db.SVCactions.action,
                        db.SVCactions.status,
                        db.SVCactions.ack,
                        db.SVCactions.status_log,
                        orderby=db.SVCactions.id
                       )
    data = [["action id",
             "node name",
             "service name",
             "begin",
             "action",
             "status",
             "acknowledged",
             "log"]]
    for row in rows:
        data.append([str(row.id),
                     str(row.hostname),
                     str(row.svcname),
                     str(row.begin),
                     str(row.action),
                     str(row.status),
                     str(row.ack),
                     str(row.status_log)])
    return {"ret": 0, "msg": "", "data":data}

@auth_uuid
@service.xmlrpc
def collector_update_action_queue(data, auth):
    nodename = auth[1]
    for id, ret, out, err in data:
        q = db.action_queue.id == id
        q &= db.action_queue.nodename == nodename
        db(q).update(stdout=out, stderr=err, ret=ret, status="T", date_dequeued=datetime.datetime.now())

@auth_uuid
@service.xmlrpc
def collector_get_action_queue(nodename, auth):
    q = db.action_queue.nodename == nodename
    q &= db.action_queue.action_type == "pull"
    q &= db.action_queue.status == "W"
    sql = db(q)._select()
    data = db.executesql(sql, as_dict=True)
    if len(data) > 0:
        db(q).update(status="Q")
        db.commit()
    return data

@auth_uuid
@service.xmlrpc
def collector_list_actions(cmd, auth):
    d = {}
    nodename = auth[1]
    d["mon_acked_on"] = datetime.datetime.now()

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        q = db.SVCactions.svcname == cmd["svcname"]
    else:
        q = db.SVCactions.hostname == nodename

    if "begin" not in cmd:
        b = datetime.datetime.now() - datetime.timedelta(days=7)
    else:
        b = str_to_datetime(cmd["begin"])
        if b is None:
            return {"ret": 1, "msg": "could not parse --begin as a date"}
    q &= db.SVCactions.end >= b

    if "end" not in cmd:
        e = datetime.datetime.now()
    else:
        e = str_to_datetime(cmd["end"])
        if e is None:
            return {"ret": 1, "msg": "could not parse --end as a date"}
    q &= db.SVCactions.begin <= e

    q &= (db.SVCactions.status_log == "") | (db.SVCactions.status_log == None)
    rows = db(q).select(db.SVCactions.id,
                        db.SVCactions.hostname,
                        db.SVCactions.svcname,
                        db.SVCactions.begin,
                        db.SVCactions.end,
                        db.SVCactions.action,
                        db.SVCactions.status,
                        db.SVCactions.ack,
                        db.SVCactions.cron
                       )
    header = ['action id',
              'node name',
              'service name',
              'begin',
              'end',
              'action',
              'status',
              'acknowledged',
              'scheduled']
    data = [header]
    for row in rows:
        data.append([
          str(row.id),
          str(row.hostname),
          str(row.svcname),
          str(row.begin),
          str(row.end),
          str(row.action),
          str(row.status),
          str(row.ack),
          str(row.cron)
        ])

    return {"ret": 0, "msg": "", "data":data}

@auth_uuid
@service.xmlrpc
def collector_status(cmd, auth):
    d = {}
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= (db.svcmon.mon_nodname == nodename) | (db.svcmon.mon_vmname == nodename)
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%cmd["svcname"]}

    o = db.svcmon.mon_svcname
    q = db.svcmon.mon_nodname == db.nodes.nodename
    if "svcname" in cmd:
        q &= db.svcmon.mon_svcname == cmd["svcname"]
    else:
        rows = db(db.svcmon.mon_nodname==nodename).select(db.svcmon.mon_svcname)
        svcs = map(lambda x: x.mon_svcname, rows)
        if len(svcs) > 0:
            q &= db.svcmon.mon_svcname.belongs(svcs)
        else:
            q &= db.svcmon.id < 0
    rows = db(q).select(db.svcmon.mon_nodname,
                        db.svcmon.mon_svcname,
                        db.nodes.host_mode,
                        db.svcmon.mon_availstatus,
                        db.svcmon.mon_overallstatus,
                        db.svcmon.mon_updated,
                        orderby=o,
                        limitby=(0,100)
                       )
    header = ['node name',
              'service instance',
              'host mode',
              'availability status',
              'overall status',
              'status last update']
    data = [header]
    for row in rows:
        data.append([
          str(row.svcmon.mon_nodname),
          str(row.svcmon.mon_svcname),
          str(row.nodes.host_mode),
          str(row.svcmon.mon_availstatus),
          str(row.svcmon.mon_overallstatus),
          str(row.svcmon.mon_updated)
        ])

    return {"ret": 0, "msg": "", "data":data}

@auth_uuid
@service.xmlrpc
def collector_networks(cmd, auth):
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        data = []
    else:
        sql = """select
                   node_ip.addr,
                   node_ip.mac,
                   node_ip.intf,
                   networks.name,
                   networks.comment,
                   networks.pvid,
                   networks.network,
                   networks.broadcast,
                   networks.netmask,
                   networks.gateway,
                   networks.begin,
                   networks.end
                 from node_ip, networks
                 where
                   node_ip.nodename = "%(nodename)s" and
                   inet_aton(node_ip.addr) > inet_aton(begin) and
                   inet_aton(node_ip.addr)  < inet_aton(end)""" % dict(nodename=nodename)
        rows = db.executesql(sql)
        header = [
          'ip',
          'mac',
          'interface',
          'net name',
          'net comment',
          'net pvid',
          'net base',
          'net broadcast',
          'net mask',
          'net gateway',
          'net begin',
          'net end'
        ]
        data = [header]
        for row in rows:
            data.append(map(lambda x: unicode(x), row))
    return {"ret": 0, "msg": "", "data": data}


@auth_uuid
@service.xmlrpc
def collector_asset(cmd, auth):
    d = {}
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        pass
    else:
        q = db.nodes.nodename == nodename
        j = db.nodes.project == db.apps.app
        l = db.apps.on(j)
        rows = db(q).select(
          db.nodes.ALL,
          db.apps.ALL,
          cacheable=True, left=l
        )

        header = [
          'node',
          'fqdn',
          'asset name',
          'os, name',
          'os, release',
          'os, arch',
          'os, vendor',
          'os, kernel',
          'location, country',
          'location, city',
          'location, zip',
          'location, addr',
          'location, building',
          'location, floor',
          'location, room',
          'location, rack',
          'location, enclosure',
          'location, enclosure slot',
          'power, cabinet1',
          'power, cabinet2',
          'power, supplies',
          'power, protect',
          'power, protect breaker',
          'power, breaker1',
          'power, breaker2',
          'cpu, threads',
          'cpu, cores',
          'cpu, dies',
          'cpu, frequency',
          'cpu, model',
          'mem, banks',
          'mem, slots',
          'mem, size in MB',
          'server, serial',
          'server, model',
          'server, team responsible',
          'server, team support',
          'server, team integration',
          'server, host mode',
          'server, environment',
          'server, type',
          'server, role',
          'server, status',
          'hypervisor',
          'hypervisor pool',
          'hypervisor virtual datacenter',
          'opensvc, version',
          'opensvc, listener port',
          'warranty end',
          'maintenance end',
          'obsolescence, os warning date',
          'obsolescence, os alert date',
          'obsolescence, hw warning date',
          'obsolescence, hw alert date',
          'app, domain',
          'app, operations team',
          'updated',
        ]
        data = [header]
        for row in rows:
            data.append([
              str(row.nodes.nodename),
              str(row.nodes.fqdn),
              str(row.nodes.assetname),
              str(row.nodes.os_name),
              str(row.nodes.os_release),
              str(row.nodes.os_arch),
              str(row.nodes.os_vendor),
              str(row.nodes.os_kernel),
              str(row.nodes.loc_country),
              str(row.nodes.loc_city),
              str(row.nodes.loc_zip),
              str(row.nodes.loc_addr),
              str(row.nodes.loc_building),
              str(row.nodes.loc_floor),
              str(row.nodes.loc_room),
              str(row.nodes.loc_rack),
              str(row.nodes.enclosure),
              str(row.nodes.enclosureslot) if row.nodes.enclosureslot is not None else "",
              str(row.nodes.power_cabinet1),
              str(row.nodes.power_cabinet2),
              str(row.nodes.power_supply_nb),
              str(row.nodes.power_protect),
              str(row.nodes.power_protect_breaker),
              str(row.nodes.power_breaker1),
              str(row.nodes.power_breaker2),
              str(row.nodes.cpu_threads),
              str(row.nodes.cpu_cores),
              str(row.nodes.cpu_dies),
              str(row.nodes.cpu_freq),
              str(row.nodes.cpu_model),
              str(row.nodes.mem_banks),
              str(row.nodes.mem_slots),
              str(row.nodes.mem_bytes),
              str(row.nodes.serial),
              str(row.nodes.model),
              str(row.nodes.team_responsible),
              str(row.nodes.team_support),
              str(row.nodes.team_integ),
              str(row.nodes.host_mode),
              str(row.nodes.environnement),
              str(row.nodes.type),
              str(row.nodes.role),
              str(row.nodes.status),
              str(row.nodes.hv) if row.nodes.hv is not None else "",
              str(row.nodes.hvpool) if row.nodes.hvpool is not None else "",
              str(row.nodes.hvvdc) if row.nodes.hvvdc is not None else "",
              str(row.nodes.version),
              str(row.nodes.listener_port),
              str(row.nodes.warranty_end) if row.nodes.warranty_end is not None else "",
              str(row.nodes.maintenance_end) if row.nodes.maintenance_end is not None else "",
              str(row.nodes.os_obs_warn_date) if row.nodes.os_obs_warn_date is not None else "",
              str(row.nodes.os_obs_alert_date) if row.nodes.os_obs_alert_date is not None else "",
              str(row.nodes.hw_obs_warn_date) if row.nodes.hw_obs_warn_date is not None else "",
              str(row.nodes.hw_obs_alert_date) if row.nodes.hw_obs_alert_date is not None else "",
              str(row.apps.app_domain) if row.apps.app_domain is not None else "",
              str(row.apps.app_team_ops) if row.apps.app_team_ops is not None else "",
              str(row.nodes.updated)
            ])


    return {"ret": 0, "msg": "", "data": data}

@auth_uuid
@service.xmlrpc
def collector_checks(cmd, auth):
    d = {}
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        q = db.checks_live.chk_svcname == cmd["svcname"]
    else:
        q = db.checks_live.chk_nodename == nodename

    rows = db(q).select(db.checks_live.chk_svcname,
                        db.checks_live.chk_instance,
                        db.checks_live.chk_type,
                        db.checks_live.chk_value,
                        db.checks_live.chk_low,
                        db.checks_live.chk_high,
                        db.checks_live.chk_threshold_provider,
                        db.checks_live.chk_updated,
                        limitby=(0,1000)
                       )
    header = ['service',
              'instance',
              'type',
              'value',
              'low threshold',
              'high threshold',
              'threshold provider',
              'last update date']
    data = [header]
    for row in rows:
        data.append([
          str(row.chk_svcname),
          str(row.chk_instance),
          str(row.chk_type),
          str(row.chk_value),
          str(row.chk_low),
          str(row.chk_high),
          str(row.chk_threshold_provider),
          str(row.chk_updated)
        ])
    return {"ret": 0, "msg": "", "data":data}

@auth_uuid
@service.xmlrpc
def collector_alerts(cmd, auth):
    d = {}
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        where = "where dash_svcname='%s'"%cmd["svcname"]
    else:
        where = "where dash_nodename='%s'"%nodename

    labels = ["dash_severity", "dash_type", "dash_created", "dash_fmt", "dash_dict", "dash_nodename", "dash_svcname"]
    sql = """select %s from dashboard %s order by dash_severity desc limit 0,1000"""%(','.join(labels), where)
    rows = db.executesql(sql)
    data = [["severity", "type", "node", "service", "alert", "created"]]
    for row in rows:
        fmt = row[3]
        try:
            d = json.loads(row[4])
            alert = fmt%d
        except:
            alert = ""
        data += [[str(row[0]), str(row[1]), row[5], row[6], alert, str(row[2])]]
    return {"ret": 0, "msg": "", "data":data}

@auth_uuid
@service.xmlrpc
def collector_events(cmd, auth):
    d = {}
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        where = "where log_svcname='%s'"%cmd["svcname"]
    else:
        where = "where log_nodename='%s'"%nodename

    if "begin" not in cmd:
        b = datetime.datetime.now() - datetime.timedelta(days=7)
    else:
        b = str_to_datetime(cmd["begin"])
        if b is None:
            return {"ret": 1, "msg": "could not parse --begin as a date"}
    where += """ and log_date >= "%s" """%str(b)

    if "end" not in cmd:
        e = datetime.datetime.now()
    else:
        e = str_to_datetime(cmd["end"])
        if e is None:
            return {"ret": 1, "msg": "could not parse --end as a date"}
    where += """ and log_date <= "%s" """%str(e)

    labels = ["log_date", "log_nodename", "log_svcname", "log_level", "log_action", "log_fmt", "log_dict"]
    sql = """select %s from log %s order by log_date limit 0,1000"""%(','.join(labels), where)
    rows = db.executesql(sql)
    data = [["date", "node", "service", "level", "action", "event"]]
    for row in rows:
        fmt = row[5]
        try:
            d = json.loads(row[6])
            msg = fmt%d
        except:
            msg = ""
        data += [[str(row[0]), str(row[1]), str(row[2]), str(row[3]), str(row[4]), msg]]
    return {"ret": 0, "msg": "", "data":data}

@auth_uuid
@service.xmlrpc
def collector_disks(cmd, auth):
    d = {}
    nodename = auth[1]

    if "svcname" in cmd:
        q = db.svcmon.mon_svcname == cmd["svcname"]
        q &= db.svcmon.mon_nodname == nodename
        n = db(q).count()
        if n == 0:
            return {"ret": 1, "msg": "this node is not owner of %s"%svcname}

    if "svcname" in cmd:
        q = db.b_disk_app.disk_svcname == cmd["svcname"]
    else:
        q = db.b_disk_app.disk_nodename == nodename

    o = db.b_disk_app.disk_id | db.b_disk_app.disk_svcname | db.b_disk_app.disk_nodename
    rows = db(q).select(db.b_disk_app.disk_nodename,
                        db.b_disk_app.disk_svcname,
                        db.b_disk_app.disk_id,
                        db.b_disk_app.disk_size,
                        db.b_disk_app.disk_alloc,
                        db.b_disk_app.disk_devid,
                        db.b_disk_app.disk_name,
                        db.b_disk_app.disk_raid,
                        db.b_disk_app.disk_arrayid,
                        db.b_disk_app.disk_group
                       )

    labels = ["node name", "service name", "wwid", "size", "allocated",
              "array device id", "array device name", "raid",
              "array id", "array disk group"]
    data = [labels]
    for row in rows:
        data += [[str(row.disk_nodename),
                  str(row.disk_svcname),
                  str(row.disk_id),
                  str(row.disk_size),
                  str(row.disk_alloc),
                  str(row.disk_devid),
                  str(row.disk_name),
                  str(row.disk_raid),
                  str(row.disk_arrayid),
                  str(row.disk_group)]]
    return {"ret": 0, "msg": "", "data":data}

@auth_uuid
@service.xmlrpc
def collector_list_nodes(cmd, auth):
    d = {}
    nodename = auth[1]
    if "fset" not in cmd:
        return {"ret": 1, "msg": "fset not specified"}
    fset = cmd['fset']
    q = db.gen_filtersets.fset_name == fset
    row = db(q).select().first()
    if row is None:
        return {"ret": 1, "msg": "filterset not found"}
    fset_id = row.id
    q = db.nodes.id > 0
    q = apply_filters(q, fset_id, db.nodes.nodename, None)
    rows = db(q).select(db.nodes.nodename, orderby=db.nodes.nodename)
    nodes = [r.nodename.lower() for r in rows]
    return {"ret": 0, "msg": "", "data": nodes}

@auth_uuid
@service.xmlrpc
def collector_list_services(cmd, auth):
    d = {}
    nodename = auth[1]
    if "fset" not in cmd:
        return {"ret": 1, "msg": "fset not specified"}
    fset = cmd['fset']
    q = db.gen_filtersets.fset_name == fset
    row = db(q).select().first()
    if row is None:
        return {"ret": 1, "msg": "filterset not found"}
    fset_id = row.id
    q = db.svcmon.mon_nodname == db.nodes.nodename
    q = apply_filters(q, fset_id, db.svcmon.mon_nodname, db.svcmon.mon_svcname)
    rows = db(q).select(db.svcmon.mon_svcname,
                        orderby=db.svcmon.mon_svcname,
                        groupby=db.svcmon.mon_svcname)
    services = [r.mon_svcname.lower() for r in rows]
    return {"ret": 0, "msg": "", "data": services}

@auth_uuid
@service.xmlrpc
def collector_list_filtersets(cmd, auth):
    d = {}
    nodename = auth[1]
    if "fset" in cmd and len(cmd['fset']) > 0:
        q = db.gen_filtersets.fset_name.like(cmd['fset'])
    else:
        q = db.gen_filtersets.id > 0
    rows = db(q).select(db.gen_filtersets.fset_name,
                        orderby=db.gen_filtersets.fset_name)
    fsets = [r.fset_name.lower() for r in rows]
    return {"ret": 0, "msg": "", "data": fsets}




#
# Dashboard updates
#
#   Used by background feed dequeue process for periodic dashboard alerts
#
def cron_dash_service_not_updated():
    sql = """insert
             into dashboard
               select
                 NULL,
                 "service configuration not updated",
                 svc_name,
                 "",
                 0,
                 "",
                 "",
                 updated,
                 "",
                 svc_type,
                 "",
                 now()
               from services
               where updated < date_sub(now(), interval 25 hour)
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_svcmon_not_updated():
    sql = """select dashboard.id
             from dashboard
             left join svcmon on
               dashboard.dash_svcname=svcmon.mon_svcname and
               dashboard.dash_nodename=svcmon.mon_nodname
             where
               dashboard.dash_svcname!="" and
               dashboard.dash_nodename != "" and
               svcmon.id is NULL"""
    rows = db.executesql(sql)
    ids = map(lambda x: "'%d'"%x[0], rows)

    if len(ids) > 0:
        sql = """delete from dashboard
                 where
                   id in (%s)
              """%','.join(ids)
        db.executesql(sql)

    sql = """insert into dashboard
               select
                 NULL,
                 "service status not updated",
                 mon_svcname,
                 mon_nodname,
                 if(mon_svctype="PRD", 1, 0),
                 "",
                 "",
                 mon_updated,
                 "",
                 mon_svctype,
                 "",
                 now()
               from svcmon
               where mon_updated < date_sub(now(), interval 16 minute)
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_node_not_updated():
    sql = """insert into dashboard
               select
                 NULL,
                 "node information not updated",
                 "",
                 nodename,
                 0,
                 "",
                 "",
                 updated,
                 "",
                 host_mode,
                 "",
                 now()
               from nodes
               where updated < date_sub(now(), interval 25 hour)
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_node_without_asset():
    sql = """insert into dashboard
               select
                 NULL,
                 "node without asset information",
                 "",
                 mon_nodname,
                 0,
                 "",
                 "",
                 now(),
                 "",
                 mon_svctype,
                 "",
                 now()
               from svcmon
               where
                 mon_nodname not in (
                   select nodename from nodes
                 )
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_node_beyond_maintenance_date():
    now = datetime.datetime.now()
    now = now - datetime.timedelta(microseconds=now.microsecond)

    sql = """insert into dashboard
               select
                 NULL,
                 "node maintenance expired",
                 "",
                 nodename,
                 1,
                 "",
                 "",
                 "%(now)s",
                 "",
                 host_mode,
                 "",
                 "%(now)s"
               from nodes
               where
                 maintenance_end is not NULL and
                 maintenance_end != "0000-00-00 00:00:00" and
                 maintenance_end < now()
               on duplicate key update
                 dash_updated="%(now)s"
          """%dict(now=str(now))
    db.executesql(sql)
    db.commit()

    sql = """delete from dashboard where
               dash_type="node maintenance expired" and
               (
                 dash_updated < "%(now)s" or
                 dash_updated is null
               )
          """%dict(now=str(now))
    db.executesql(sql)


def cron_dash_node_near_maintenance_date():
    sql = """insert into dashboard
               select
                 NULL,
                 "node close to maintenance end",
                 "",
                 nodename,
                 0,
                 "",
                 "",
                 now(),
                 "",
                 host_mode,
                 "",
                 now()
               from nodes
               where
                 maintenance_end is not NULL and
                 maintenance_end != "0000-00-00 00:00:00" and
                 maintenance_end > date_sub(now(), interval 30 day) and
                 maintenance_end < now()
               on duplicate key update
                 dash_updated=now()
          """
    db.commit()
    db.executesql(sql)

def cron_dash_node_without_maintenance_date():
    # do not alert for nodes under warranty
    sql = """insert into dashboard
               select
                 NULL,
                 "node without maintenance end date",
                 "",
                 nodename,
                 0,
                 "",
                 "",
                 now(),
                 "",
                 host_mode,
                 "",
                 now()
               from nodes
               where
                 (warranty_end is NULL or
                  warranty_end = "0000-00-00 00:00:00" or
                  warranty_end < now()) and
                 (maintenance_end is NULL or
                  maintenance_end = "0000-00-00 00:00:00") and
                 model not like "%virt%" and
                 model not like "%Not Specified%" and
                 model not like "%KVM%"
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_checks_not_updated():
    sql = """delete from dashboard
             where
               dash_type="check value not updated"
               and dash_nodename not in (
                 select distinct chk_nodename from checks_live
               )
          """
    rows = db.executesql(sql)

    sql = """select d.id from dashboard d
             left join checks_live c on
               d.dash_dict_md5=md5(concat(
                 '{"ctype": "', c.chk_type,
                 '", "inst": "', c.chk_instance,
                 '", "ttype": "', c.chk_threshold_provider,
                 '", "val": ', c.chk_value,
                 ', "min": ', c.chk_low,
                 ', "max": ', c.chk_high, '}'))
               and d.dash_nodename=c.chk_nodename
             where
               d.dash_type="check out of bounds"
               and c.id is NULL
          """
    rows = db.executesql(sql)
    ids = map(lambda x: str(x[0]), rows)
    if len(ids) > 0:
        sql = """delete from dashboard where id in (%s)"""%','.join(ids)
        db.executesql(sql)

    sql = """select d.id from dashboard d
             left join checks_live c on
               d.dash_dict_md5=md5(concat('{"i":"', c.chk_instance, '", "t":"', c.chk_type, '"}'))
               and d.dash_nodename=c.chk_nodename
             where
               d.dash_type="check value not updated"
               and c.id is NULL
          """
    rows = db.executesql(sql)
    ids = map(lambda x: str(x[0]), rows)
    if len(ids) > 0:
        sql = """delete from dashboard where id in (%s)"""%','.join(ids)
        db.executesql(sql)

    sql = """insert into dashboard
               select
                 NULL,
                 "check value not updated",
                 "",
                 c.chk_nodename,
                 if(n.host_mode="PRD", 1, 0),
                 "%(t)s:%(i)s",
                 concat('{"i":"', chk_instance, '", "t":"', chk_type, '"}'),
                 chk_updated,
                 md5(concat('{"i":"', chk_instance, '", "t":"', chk_type, '"}')),
                 n.host_mode,
                 "",
                 now()
               from checks_live c
                 join nodes n on c.chk_nodename=n.nodename
               where
                 chk_updated < date_sub(now(), interval 1 day)
               on duplicate key update
                 dash_updated=now()"""
    db.executesql(sql)
    db.commit()

def cron_dash_app_without_responsible():
    sql = """delete from dashboard where
             dash_type="application code without responsible" and
             dash_dict in (
               select
                 concat('{"a":"', app, '"}')
               from v_apps
               where
                 roles is not NULL
             ) or dash_dict = "" or dash_dict is NULL
          """
    db.executesql(sql)

    sql = """insert into dashboard
               select
                 NULL,
                 "application code without responsible",
                 "",
                 "",
                 2,
                 "%(a)s",
                 concat('{"a":"', app, '"}'),
                 now(),
                 md5(concat('{"a":"', app, '"}')),
                 "",
                 "",
                 now()
               from v_apps
               where
                 roles is NULL
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_purge():
    sql = """delete from dashboard where
              dash_svcname != "" and
              dash_svcname not in (
                select distinct mon_svcname from svcmon
              )
          """
    db.executesql(sql)
    db.commit()

def cron_dash_obs_purge():
    sql = """delete from dashboard
             where dash_type like "%obsolescence%"
          """
    db.executesql(sql)
    db.commit()

def cron_dash_obs_hw_without_alert():
    cron_dash_obs_without('hw', 'alert')

def cron_dash_obs_os_without_alert():
    cron_dash_obs_without('os', 'alert')

def cron_dash_obs_hw_without_warn():
    cron_dash_obs_without('hw', 'warn')

def cron_dash_obs_os_without_warn():
    cron_dash_obs_without('os', 'warn')

def cron_dash_obs_without(t, a):
    if t == "hw":
        tl = "hardware"
    else:
        tl = t
    if a == "warn":
        al = "warning"
    else:
        al = a
    sql = """insert into dashboard
               select
                 NULL,
                 "%(tl)s obsolescence %(al)s date not set",
                 "",
                 n.nodename,
                 0,
                 "%(t)s: %%(o)s",
                 concat('{"o": "', o.obs_name, '"}'),
                 now(),
                 md5(concat('{"o": "', o.obs_name, '"}')),
                 "",
                 "",
                 now()
               from obsolescence o
                 join nodes n on
                   o.obs_name = n.model or
                   o.obs_name = concat_ws(' ',n.os_name,n.os_vendor,n.os_release,n.os_update)
               where
                 o.obs_type = "%(t)s" and
                 o.obs_name not like "%%virtual%%" and
                 o.obs_name not like "%%virtuel%%" and
                 o.obs_name not like "%%cluster%%" and
                 (
                   o.obs_%(a)s_date is NULL or
                   o.obs_%(a)s_date = "0000-00-00 00:00:00"
                 )
               on duplicate key update
                 dash_updated=now()
          """%dict(t=t, tl=tl, a=a, al=al)
    db.executesql(sql)
    db.commit()

def cron_dash_obs_os_alert():
    sql = """insert into dashboard
               select
                 NULL,
                 "os obsolescence alert",
                 "",
                 n.nodename,
                 1,
                 "%(o)s obsolete since %(a)s",
                 concat('{"a": "', o.obs_alert_date,
                        '", "o": "', o.obs_name,
                        '"}'),
                 now(),
                 "",
                 "",
                 "",
                 now()
               from obsolescence o
                 join nodes n on
                   o.obs_name = concat_ws(' ',n.os_name,n.os_vendor,n.os_release,n.os_update)
               where
                 o.obs_alert_date is not NULL and
                 o.obs_alert_date != "0000-00-00 00:00:00" and
                 o.obs_alert_date < now() and
                 o.obs_type = "os"
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_obs_os_warn():
    sql = """insert into dashboard
               select
                 NULL,
                 "os obsolescence warning",
                 "",
                 n.nodename,
                 0,
                 "%(o)s warning since %(a)s",
                 concat('{"a": "', o.obs_warn_date,
                        '", "o": "', o.obs_name,
                        '"}'),
                 now(),
                 "",
                 "",
                 "",
                 now()
               from obsolescence o
                 join nodes n on
                   o.obs_name = concat_ws(' ',n.os_name,n.os_vendor,n.os_release,n.os_update)
               where
                 o.obs_alert_date is not NULL and
                 o.obs_alert_date != "0000-00-00 00:00:00" and
                 o.obs_warn_date < now() and
                 o.obs_alert_date > now() and
                 o.obs_type = "os"
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_obs_hw_alert():
    sql = """insert into dashboard
               select
                 NULL,
                 "hardware obsolescence warning",
                 "",
                 n.nodename,
                 1,
                 "%(o)s obsolete since %(a)s",
                 concat('{"a": "', o.obs_alert_date,
                        '", "o": "', o.obs_name,
                        '"}'),
                 now(),
                 "",
                 "",
                 "",
                 now()
               from obsolescence o
                 join nodes n on
                   o.obs_name = n.model
               where
                 o.obs_name not like "%virtual%" and
                 o.obs_name not like "%virtuel%" and
                 o.obs_name not like "%cluster%" and
                 o.obs_alert_date is not NULL and
                 o.obs_alert_date != "0000-00-00 00:00:00" and
                 o.obs_alert_date < now() and
                 o.obs_type = "hw"
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_obs_hw_warn():
    sql = """insert into dashboard
               select
                 NULL,
                 "hardware obsolescence warning",
                 "",
                 n.nodename,
                 0,
                 "%(o)s warning since %(a)s",
                 concat('{"a": "', o.obs_warn_date,
                        '", "o": "', o.obs_name,
                        '"}'),
                 now(),
                 "",
                 "",
                 "",
                 now()
               from obsolescence o
                 join nodes n on
                   o.obs_name = n.model
               where
                 o.obs_name not like "%virtual%" and
                 o.obs_name not like "%virtuel%" and
                 o.obs_name not like "%cluster%" and
                 o.obs_alert_date is not NULL and
                 o.obs_alert_date != "0000-00-00 00:00:00" and
                 o.obs_warn_date < now() and
                 o.obs_alert_date > now() and
                 o.obs_type = "hw"
               on duplicate key update
                 dash_updated=now()
          """
    db.executesql(sql)
    db.commit()

def cron_dash_action_errors_cleanup():
    sql = """delete from dashboard
             where
               dash_dict='{"err": "0"}' and
               dash_type='action errors'
          """
    db.executesql(sql)
    db.commit()
#
# Dashboard updates
#
#   Used by xmlrpc processors for event based dashboard alerts
#
def update_dash_node_beyond_maintenance_end(nodename):
    sql = """delete from dashboard
               where
                 dash_nodename in (
                   select nodename
                   from nodes
                   where
                     nodename="%(nodename)s" and
                     maintenance_end is not NULL and
                     maintenance_end != "0000-00-00 00:00:00" and
                     maintenance_end < now()
                 ) and
                 dash_type = "node maintenance expired"
          """%dict(nodename=nodename)
    rows = db.executesql(sql)
    db.commit()

def update_dash_node_near_maintenance_end(nodename):
    sql = """delete from dashboard
               where
                 dash_nodename in (
                   select nodename
                   from nodes
                   where
                     nodename="%(nodename)s" and
                     maintenance_end is not NULL and
                     maintenance_end != "0000-00-00 00:00:00" and
                     maintenance_end > now() and
                     maintenance_end < date_sub(now(), interval 30 day)
                 ) and
                 dash_type = "node maintenance expired"
          """%dict(nodename=nodename)
    rows = db.executesql(sql)
    db.commit()

def update_dash_node_without_asset(nodename):
    sql = """delete from dashboard
               where
                 dash_nodename in (
                   select nodename
                   from nodes
                   where
                     nodename="%(nodename)s"
                 ) and
                 dash_type = "node without asset information"
          """%dict(nodename=nodename)
    rows = db.executesql(sql)
    db.commit()

def update_dash_node_without_maintenance_end(nodename):
    sql = """delete from dashboard
               where
                 dash_nodename in (
                   select nodename
                   from nodes
                   where
                     nodename="%(nodename)s" and
                     ((maintenance_end != "0000-00-00 00:00:00" and
                       maintenance_end is not NULL) or
                       model like "%%virt%%" or
                       model like "%%Not Specified%%" or
                       model like "%%KVM%%")
                 ) and
                 dash_type = "node without maintenance end date"
          """%dict(nodename=nodename)
    rows = db.executesql(sql)
    db.commit()

def update_dash_service_not_updated(svcname):
    sql = """delete from dashboard
               where
                 dash_svcname = "%(svcname)s" and
                 dash_type = "service configuration not updated"
          """%dict(svcname=svcname)
    rows = db.executesql(sql)
    db.commit()

def update_dash_svcmon_not_updated(svcname, nodename):
    sql = """delete from dashboard
               where
                 dash_svcname = "%(svcname)s" and
                 dash_nodename = "%(nodename)s" and
                 dash_type = "service status not updated"
          """%dict(svcname=svcname, nodename=nodename)
    rows = db.executesql(sql)
    db.commit()

def update_dash_node_not_updated(nodename):
    sql = """delete from dashboard
               where
                 dash_nodename = "%(nodename)s" and
                 dash_type = "node information not updated"
          """%dict(nodename=nodename)
    rows = db.executesql(sql)
    db.commit()

def update_dash_pkgdiff(nodename):
    nodename = nodename.strip("'")
    now = datetime.datetime.now()
    now = now - datetime.timedelta(microseconds=now.microsecond)

    q = db.svcmon.mon_nodname == nodename
    q &= db.svcmon.mon_updated > datetime.datetime.now() - datetime.timedelta(minutes=20)
    rows = db(q).select(db.svcmon.mon_svcname, db.svcmon.mon_svctype)
    svcnames = map(lambda x: x.mon_svcname, rows)

    for row in rows:
        svcname = row.mon_svcname

        q = db.svcmon.mon_svcname == svcname
        q &= db.svcmon.mon_updated > datetime.datetime.now() - datetime.timedelta(minutes=20)
        nodes = map(lambda x: repr(x.mon_nodname),
                    db(q).select(db.svcmon.mon_nodname,
                                 orderby=db.svcmon.mon_nodname))
        n = len(nodes)

        if n < 2:
            continue

        sql = """select count(id) from (
                   select
                     id,
                     count(pkg_nodename) as c
                   from packages
                   where
                     pkg_nodename in (%(nodes)s)
                   group by
                     pkg_name,
                     pkg_version,
                     pkg_arch,
                     pkg_type
                  ) as t
                  where
                    t.c!=%(n)s
              """%dict(nodes=','.join(nodes), n=n)

        rows = db.executesql(sql)

        if rows[0][0] == 0:
            continue

        if row.mon_svctype == 'PRD':
            sev = 1
        else:
            sev = 0

        skip = 0
        trail = ""
        while True:
            nodes_s = ','.join(nodes).replace("'", "")+trail
            if len(nodes_s) < 50:
                break
            skip += 1
            nodes = nodes[:-1]
            trail = ", ... (+%d)"%skip

        sql = """insert into dashboard
                 set
                   dash_type="package differences in cluster",
                   dash_svcname="%(svcname)s",
                   dash_nodename="",
                   dash_severity=%(sev)d,
                   dash_fmt="%%(n)s package differences in cluster %%(nodes)s",
                   dash_dict='{"n": %(n)d, "nodes": "%(nodes)s"}',
                   dash_dict_md5=md5('{"n": %(n)d, "nodes": "%(nodes)s"}'),
                   dash_created="%(now)s",
                   dash_updated="%(now)s",
                   dash_env="%(env)s"
                 on duplicate key update
                   dash_updated="%(now)s"
              """%dict(svcname=svcname,
                       now=str(now),
                       sev=sev,
                       env=row.mon_svctype,
                       n=rows[0][0],
                       nodes=nodes_s)

        rows = db.executesql(sql)
        db.commit()

    # clean old
    q = db.dashboard.dash_svcname.belongs(svcnames)
    q &= db.dashboard.dash_type == "package differences in cluster"
    q &= db.dashboard.dash_updated < now
    db(q).delete()
    db.commit()


def update_dash_flex_cpu(svcname):
    sql = """delete from dashboard
               where
                 dash_svcname = "%(svcname)s" and
                 dash_type = "flex error" and
                 dash_fmt like "%%average cpu usage%%"
          """%dict(svcname=svcname)
    rows = db.executesql(sql)
    db.commit()

    sql = """select svc_type from services
             where
               svc_name="%(svcname)s"
          """%dict(svcname=svcname)
    rows = db.executesql(sql)

    if len(rows) == 0:
        return
    elif len(rows) == 1 and rows[0][0] == 'PRD':
        sev = 4
    else:
        sev = 3

    sql = """insert into dashboard
               select
                 NULL,
                 "flex error",
                 "%(svcname)s",
                 "",
                 %(sev)d,
                 "%%(n)d average cpu usage. thresholds: %%(cmin)d - %%(cmax)d",
                 concat('{"n": "', t.up,
                        ', "cmin": ', t.svc_flex_cpu_low_threshold,
                        ', "cmax": ', t.svc_flex_cpu_high_threshold,
                        '}'),
                 now(),
                 md5(concat('{"n": "', t.cpu,
                        ', "cmin": ', t.svc_flex_cpu_low_threshold,
                        ', "cmax": ', t.svc_flex_cpu_high_threshold,
                        '}')),
                 "%(env)s",
                 "",
                 now()
               from (
                 select *
                 from v_flex_status
                 where
                   svc_name="%(svcname)s" and
                   up > 0 and
                   (
                     (
                       svc_flex_cpu_high_threshold > 0 and
                       cpu > svc_flex_cpu_high_threshold
                     ) or
                     (
                       svc_flex_cpu_low_threshold > 0 and
                       cpu < svc_flex_cpu_low_threshold
                     )
                   )
               ) t
               on duplicate key update
                 dash_updated=now()
          """%dict(svcname=svcname,
                   sev=sev,
                   env=rows[0][0],
                  )
    db.executesql(sql)
    db.commit()

def update_dash_flex_instances_started(svcname):
    sql = """delete from dashboard
               where
                 dash_svcname = "%(svcname)s" and
                 dash_type = "flex error" and
                 dash_fmt like "%%instances started%%"
          """%dict(svcname=svcname)
    rows = db.executesql(sql)
    db.commit()

    sql = """select svc_type from services
             where
               svc_name="%(svcname)s"
          """%dict(svcname=svcname)
    rows = db.executesql(sql)

    if len(rows) == 1 and rows[0][0] == 'PRD':
        sev = 2
    elif len(rows) == 0:
        return
    else:
        sev = 1

    sql = """insert into dashboard
               select
                 NULL,
                 "flex error",
                 "%(svcname)s",
                 "",
                 %(sev)d,
                 "%%(n)d instances started. thresholds: %%(smin)d - %%(smax)d",
                 concat('{"n": ', t.up,
                        ', "smin": ', t.svc_flex_min_nodes,
                        ', "smax": ', t.svc_flex_max_nodes,
                        '}'),
                 now(),
                 md5(concat('{"n": ', t.up,
                        ', "smin": ', t.svc_flex_min_nodes,
                        ', "smax": ', t.svc_flex_max_nodes,
                        '}')),
                 "%(env)s",
                 "",
                 now()
               from (
                 select *
                 from v_flex_status
                 where
                   svc_name="%(svcname)s" and
                   ((
                     svc_flex_min_nodes > 0 and
                     up < svc_flex_min_nodes
                   ) or
                   (
                     svc_flex_max_nodes > 0 and
                     up > svc_flex_max_nodes
                   ))
               ) t
               on duplicate key update
                 dash_updated=now()
          """%dict(svcname=svcname,
                   sev=sev,
                   env=rows[0][0],
                  )
    db.executesql(sql)
    db.commit()

def update_dash_checks_all():
    now = datetime.datetime.now()
    now = now - datetime.timedelta(microseconds=now.microsecond)

    sql = """insert into dashboard
               select
                 NULL,
                 "check out of bounds",
                 t.svcname,
                 t.nodename,
                 if (t.host_mode="PRD", 3, 2),
                 "%%(ctype)s:%%(inst)s check value %%(val)d. %%(ttype)s thresholds: %%(min)d - %%(max)d",
                 concat('{"ctype": "', t.ctype,
                        '", "inst": "', t.inst,
                        '", "ttype": "', t.ttype,
                        '", "val": ', t.val,
                        ', "min": ', t.min,
                        ', "max": ', t.max,
                        '}'),
                 "%(now)s",
                 md5(concat('{"ctype": "', t.ctype,
                        '", "inst": "', t.inst,
                        '", "ttype": "', t.ttype,
                        '", "val": ', t.val,
                        ', "min": ', t.min,
                        ', "max": ', t.max,
                        '}')),
                 t.host_mode,
                 "",
                 "%(now)s"
               from (
                 select
                   c.chk_svcname as svcname,
                   c.chk_nodename as nodename,
                   c.chk_type as ctype,
                   c.chk_instance as inst,
                   c.chk_threshold_provider as ttype,
                   c.chk_value as val,
                   c.chk_low as min,
                   c.chk_high as max,
                   n.host_mode
                 from checks_live c left join nodes n on c.chk_nodename=n.nodename
                 where
                   c.chk_updated >= date_sub(now(), interval 1 day) and
                   (
                     c.chk_value < c.chk_low or
                     c.chk_value > c.chk_high
                   )
               ) t
               on duplicate key update
                 dash_updated="%(now)s"
          """%dict(now=str(now))
    db.executesql(sql)
    db.commit()

    sql = """delete from dashboard
               where
                 (
                   (
                     dash_type = "check out of bounds" and
                     ( dash_updated < "%(now)s" or dash_updated is null )
                   ) or
                   dash_type = "check value not updated"
                 )
          """%dict(now=str(now))

    rows = db.executesql(sql)
    db.commit()

def update_dash_checks(nodename):
    nodename = nodename.strip("'")
    sql = """select host_mode from nodes
             where
               nodename="%(nodename)s"
          """%dict(nodename=nodename)
    rows = db.executesql(sql)

    if len(rows) == 0:
        sev = 2
        host_mode = 'TST'
    elif len(rows) == 1 and rows[0][0] == 'PRD':
        sev = 3
        host_mode = rows[0][0]
    else:
        sev = 2
        host_mode = rows[0][0]

    now = datetime.datetime.now()
    now = now - datetime.timedelta(microseconds=now.microsecond)

    sql = """insert into dashboard
               select
                 NULL,
                 "check out of bounds",
                 t.svcname,
                 t.nodename,
                 %(sev)d,
                 "%%(ctype)s:%%(inst)s check value %%(val)d. %%(ttype)s thresholds: %%(min)d - %%(max)d",
                 concat('{"ctype": "', t.ctype,
                        '", "inst": "', t.inst,
                        '", "ttype": "', t.ttype,
                        '", "val": ', t.val,
                        ', "min": ', t.min,
                        ', "max": ', t.max,
                        '}'),
                 "%(now)s",
                 md5(concat('{"ctype": "', t.ctype,
                        '", "inst": "', t.inst,
                        '", "ttype": "', t.ttype,
                        '", "val": ', t.val,
                        ', "min": ', t.min,
                        ', "max": ', t.max,
                        '}')),
                 "%(env)s",
                 "",
                 "%(now)s"
               from (
                 select
                   chk_svcname as svcname,
                   chk_nodename as nodename,
                   chk_type as ctype,
                   chk_instance as inst,
                   chk_threshold_provider as ttype,
                   chk_value as val,
                   chk_low as min,
                   chk_high as max
                 from checks_live
                 where
                   chk_nodename = "%(nodename)s" and
                   chk_updated >= date_sub(now(), interval 1 day) and
                   (
                     chk_value < chk_low or
                     chk_value > chk_high
                   )
               ) t
               on duplicate key update
                 dash_updated="%(now)s"
          """%dict(nodename=nodename,
                   sev=sev,
                   env=host_mode,
                   now=str(now),
                  )
    db.executesql(sql)
    db.commit()

    sql = """delete from dashboard
               where
                 dash_nodename = "%(nodename)s" and
                 (
                   (
                     dash_type = "check out of bounds" and
                     ( dash_updated < "%(now)s" or dash_updated is null )
                   ) or
                   dash_type = "check value not updated"
                 )
          """%dict(nodename=nodename, now=str(now))

    rows = db.executesql(sql)
    db.commit()

def update_dash_netdev_errors(nodename):
    nodename = nodename.strip("'")
    now = datetime.datetime.now()
    now -= datetime.timedelta(microseconds=now.microsecond)
    sql = """select dev, sum(rxerrps+txerrps+collps+rxdropps+rxdropps) as errs
               from stats_netdev_err
               where
                 nodename = "%(nodename)s" and
                 date > date_sub(now(), interval 1 day)
               group by dev
          """%dict(nodename=nodename)
    rows = db.executesql(sql, as_dict=True)

    if len(rows) == 0:
        sql = """delete from checks_live
                 where
                  chk_nodename="%(nodename)s" and
                  chk_type = "netdev_err"
              """
        db.executesql(sql)
        return

    for row in rows:
        sql = """insert into checks_live
                 set
                   chk_type="netdev_err",
                   chk_svcname="",
                   chk_nodename="%(nodename)s",
                   chk_value=%(errs)d,
                   chk_updated="%(now)s",
                   chk_instance="%(dev)s"
                 on duplicate key update
                   chk_type="netdev_err",
                   chk_svcname="",
                   chk_nodename="%(nodename)s",
                   chk_value=%(errs)d,
                   chk_updated="%(now)s",
                   chk_instance="%(dev)s"
              """%dict(nodename=nodename,
                       now=now,
                       dev=row['dev'],
                       errs=int(row['errs']))
        db.executesql(sql)

    sql = """delete from checks_live
             where
               chk_type="netdev_err" and
               chk_updated < "%(now)s" and
               chk_nodename="%(nodename)s"
          """%dict(nodename=nodename,
                   now=now,
                  )
    db.executesql(sql)
    db.commit()

    q = db.checks_live.chk_nodename == nodename
    q &= db.checks_live.chk_type == "netdev_err"
    checks = db(q).select()
    update_thresholds_batch(checks, one_source=True)

    update_dash_checks(nodename)


def update_dash_action_errors(svc_name, nodename):
    svc_name = svc_name.strip("'")
    nodename = nodename.strip("'")
    sql = """select e.err, s.svc_type from b_action_errors e
             join services s on e.svcname=s.svc_name
             where
               svcname="%(svcname)s" and
               nodename="%(nodename)s"
          """%dict(svcname=svc_name, nodename=nodename)
    rows = db.executesql(sql)

    if len(rows) == 1:
        if rows[0][1] == 'PRD':
            sev = 4
        else:
            sev = 3
        sql = """insert into dashboard
                 set
                   dash_type="action errors",
                   dash_svcname="%(svcname)s",
                   dash_nodename="%(nodename)s",
                   dash_severity=%(sev)d,
                   dash_fmt="%%(err)s action errors",
                   dash_dict='{"err": "%(err)d"}',
                   dash_created=now(),
                   dash_updated=now(),
                   dash_env="%(env)s"
                 on duplicate key update
                   dash_severity=%(sev)d,
                   dash_fmt="%%(err)s action errors",
                   dash_dict='{"err": "%(err)d"}',
                   dash_updated=now(),
                   dash_env="%(env)s"
              """%dict(svcname=svc_name,
                       nodename=nodename,
                       sev=sev,
                       env=rows[0][1],
                       err=rows[0][0])
    else:
        sql = """delete from dashboard
                 where
                   dash_type="action errors" and
                   dash_svcname="%(svcname)s" and
                   dash_nodename="%(nodename)s"
              """%dict(svcname=svc_name,
                       nodename=nodename)
    db.executesql(sql)
    db.commit()

def update_dash_service_available_but_degraded(svc_name, svc_type, svc_availstatus, svc_status):
    if svc_type == 'PRD':
        sev = 3
    else:
        sev = 2
    if svc_availstatus == "up" and svc_status != "up":
        sql = """delete from dashboard
                 where
                   dash_type="service available but degraded" and
                   dash_dict!='{"s": "%s"}' and
                   dash_svcname="%s"
              """%(svc_name,svc_status)
        db.executesql(sql)
        db.commit()
        sql = """insert into dashboard
                 set
                   dash_type="service available but degraded",
                   dash_svcname="%(svcname)s",
                   dash_nodename="",
                   dash_severity=%(sev)d,
                   dash_fmt="current overall status: %%(s)s",
                   dash_dict='{"s": "%(status)s"}',
                   dash_created=now(),
                   dash_updated=now(),
                   dash_env="%(env)s"
                 on duplicate key update
                   dash_severity=%(sev)d,
                   dash_fmt="current overall status: %%(s)s",
                   dash_updated=now(),
                   dash_env="%(env)s"
              """%dict(svcname=svc_name,
                       sev=sev,
                       env=svc_type,
                       status=svc_status)
        db.executesql(sql)
        db.commit()
    else:
        sql = """delete from dashboard
                 where
                   dash_type="service available but degraded" and
                   dash_svcname="%s"
              """%svc_name
        db.executesql(sql)
        db.commit()

def update_dash_service_unavailable(svc_name, svc_type, svc_availstatus):
    if svc_type == 'PRD':
        sev = 4
    else:
        sev = 3
    if svc_availstatus in ["up", "n/a"]:
        sql = """delete from dashboard
                 where
                   dash_type="service unavailable" and
                   dash_svcname="%s"
              """%svc_name
        db.executesql(sql)
        db.commit()
    else:
        sql = """select count(id) from svcmon_log_ack
                 where
                   mon_svcname="%s" and
                   mon_begin <= now() and
                   mon_end >= now()
              """%(svc_name)
        n = db.executesql(sql)[0][0]
        if n > 0:
            sql = """delete from dashboard
                     where
                       dash_type="service unavailable" and
                       dash_svcname="%s"
                  """%(svc_name)
            db.executesql(sql)
            db.commit()
            return

        sql = """delete from dashboard
                 where
                   dash_type="service unavailable" and
                   dash_svcname="%s" and
                   dash_dict!='{"s": "%s"}'
              """%(svc_name,svc_availstatus)
        db.executesql(sql)
        db.commit()

        sql = """insert into dashboard
                 set
                   dash_type="service unavailable",
                   dash_svcname="%(svcname)s",
                   dash_nodename="",
                   dash_severity=%(sev)d,
                   dash_fmt="current availability status: %%(s)s",
                   dash_dict='{"s": "%(status)s"}',
                   dash_created=now(),
                   dash_updated=now(),
                   dash_env="%(env)s"
                 on duplicate key update
                   dash_severity=%(sev)d,
                   dash_fmt="current availability status: %%(s)s",
                   dash_updated=now(),
                   dash_env="%(env)s"
              """%dict(svcname=svc_name,
                       sev=sev,
                       env=svc_type,
                       status=svc_availstatus)
        db.executesql(sql)
        db.commit()

def update_dash_service_frozen(svc_name, nodename, svc_type, frozen):
    if svc_type == 'PRD':
        sev = 2
    else:
        sev = 1
    if frozen == "0":
        sql = """delete from dashboard
                 where
                   dash_type="service frozen" and
                   dash_svcname="%s"
              """%svc_name
        db.commit()
    else:
        sql = """insert into dashboard
                 set
                   dash_type="service frozen",
                   dash_svcname="%(svcname)s",
                   dash_nodename="%(nodename)s",
                   dash_severity=%(sev)d,
                   dash_fmt="",
                   dash_dict="",
                   dash_created=now(),
                   dash_updated=now(),
                   dash_env="%(env)s"
                 on duplicate key update
                   dash_severity=%(sev)d,
                   dash_fmt="",
                   dash_updated=now(),
                   dash_env="%(env)s"
              """%dict(svcname=svc_name,
                       nodename=nodename,
                       sev=sev,
                       env=svc_type,
                      )
    db.executesql(sql)
    db.commit()

def update_dash_service_not_on_primary(svc_name, nodename, svc_type, availstatus):
    if svc_type == 'PRD':
        sev = 1
    else:
        sev = 0

    q = db.services.svc_name == svc_name
    rows = db(q).select(db.services.svc_autostart,
                        db.services.svc_availstatus)

    if len(rows) == 0:
        return

    if rows[0].svc_autostart != nodename or \
       availstatus == "up" or \
       rows[0].svc_availstatus != "up" or \
       rows[0].svc_autostart is None or \
       rows[0].svc_autostart == "":
        sql = """delete from dashboard
                 where
                   dash_type="service not started on primary node" and
                   dash_svcname="%s"
              """%svc_name
        db.executesql(sql)
        return

    sql = """insert into dashboard
             set
               dash_type="service not started on primary node",
               dash_svcname="%(svcname)s",
               dash_nodename="%(nodename)s",
               dash_severity=%(sev)d,
               dash_fmt="",
               dash_dict="",
               dash_created=now(),
               dash_updated=now(),
               dash_env="%(env)s"
             on duplicate key update
               dash_severity=%(sev)d,
               dash_fmt="",
               dash_updated=now(),
               dash_env="%(env)s"

          """%dict(svcname=svc_name,
                   nodename=nodename,
                   sev=sev,
                   env=svc_type,
                  )
    db.executesql(sql)
    db.commit()

#
# Feed enqueue/dequeue
#
#   Feed processors can be heavy and suturate the httpd server process/thread
#   pool. Enqueue fast to release the client, then asynchronously dequeue
#   from a single background process.
#
def feed_enqueue(f, *args):
    import cPickle
    db.feed_queue.insert(q_fn=f, q_args=cPickle.dumps(args))
    db.commit()

def dash_crons2():
    # ~1/j
    cron_dash_purge()
    cron_dash_obs_purge()
    cron_dash_obs_os_alert()
    cron_dash_obs_os_warn()
    cron_dash_obs_hw_alert()
    cron_dash_obs_hw_warn()
    cron_dash_obs_os_without_alert()
    cron_dash_obs_os_without_warn()
    cron_dash_obs_hw_without_alert()
    cron_dash_obs_hw_without_warn()
    cron_dash_node_without_maintenance_date()
    cron_dash_node_near_maintenance_date()
    cron_dash_node_beyond_maintenance_date()

def dash_crons1():
    # ~1/h
    cron_dash_checks_not_updated()
    cron_dash_service_not_updated()
    cron_dash_app_without_responsible()
    cron_dash_node_not_updated()
    cron_dash_node_without_asset()
    cron_dash_action_errors_cleanup()

def dash_crons0():
    # ~1/min
    cron_dash_svcmon_not_updated()

def test_display_feed_queue_entry():
    display_feed_queue_entry(33331472)

def display_feed_queue_entry(id):
    import cPickle
    q = db.feed_queue.id == id
    row = db(q).select(cacheable=True).first()
    if row is None:
        return "not found"
    data = cPickle.loads(row.q_args)
    print data

def feed_dequeue():
    """ launched as a background process
    """
    import time
    import cPickle
    import multiprocessing

    class QueueStats(object):
        def __init__(self):
            self.reset_stats()

        def __str__(self):
            s = "feed queue stats since %s\n"%str(self.start)
            for fn in self.s:
                s += "%20s %10d %10f\n"%(fn, self.count(fn), self.avg(fn))
            return s

        def dbdump(self):
            if len(self.s) == 0:
               return
            now = datetime.datetime.now()
            sql = """truncate table feed_queue_stats"""
            db.executesql(sql)
            sql = """insert into feed_queue_stats (q_start, q_end, q_fn, q_count, q_avg) values """
            values = []
            for fn in self.s:
                values.append("""("%s", "%s", "%s", %d, %f)"""%(str(self.start), str(now), fn, self.count(fn), self.avg(fn)))
            sql += ','.join(values)
            print sql
            db.executesql(sql)

        def reset_stats(self):
            self.s = {}
            self.start = datetime.datetime.now()

        def get_total_seconds(self, td):
            return (td.microseconds + (td.seconds + td.days * 24 * 3600) * 1e6) / 1e6

        def begin(self, fn):
            self.fn = fn
            self.t = datetime.datetime.now()

        def end(self):
            elapsed = datetime.datetime.now() -self.t
            elapsed = self.get_total_seconds(elapsed)
            if self.fn not in self.s:
                self.s[self.fn] = {'count': 1, 'cumul': elapsed, 'avg': elapsed}
            else:
                self.s[self.fn]['count'] += 1
                self.s[self.fn]['cumul'] += elapsed
                print self.fn, self.s[self.fn]['count'], "+", elapsed, "cumul", self.s[self.fn]['cumul'], "avg", self.s[self.fn]['cumul']/self.s[self.fn]['count']

        def count(self, fn):
            if self.fn not in self.s:
                return 0
            return self.s[fn]['count']

        def avg(self, fn):
            if self.fn not in self.s:
                return 0
            return self.s[fn]['cumul']/self.s[fn]['count']

    n0 = 0
    n1 = 0
    n2 = 0
    stats = QueueStats()
    workers = {}
    queues = {}

    import sys
    import logging
    import copy
    import traceback
    from gluon.shell import exec_environment

    log = logging.getLogger('sched')
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    logfile = "/tmp/feed_dequeue.log"
    handler = logging.handlers.RotatingFileHandler(logfile,
                                                   maxBytes=5242880,
                                                   backupCount=5)
    handler.setFormatter(formatter)
    log.addHandler(handler)
    log.propagate = False
    log.setLevel(logging.INFO)
    log.info("logger initialized")

    def dequeue_process(name, queue):
        log = logging.getLogger(name)
        log.info("init")
        try:
            _dequeue_process(name, queue)
        except KeyboardInterrupt:
             log.error("exit on KeyboardInterrupt")

    def _dequeue_process(name, queue):
        log = logging.getLogger('sched.'+name)

        m = exec_environment('applications/feed/models/db.py')
        global db
        db = m.db
        log.info("db loaded")
        while True:
            sys.stdout.flush()
            data = queue.get()
            if data is None or type(data) != tuple or len(data) != 3:
                log.info("got poison pill")
                break
            id, fn, args = data
            if not fn in globals():
                log.error("%s not found in globals"%fn)
                continue
            try:
                args = cPickle.loads(args)
                try:
                    _b = datetime.datetime.now()
                    globals()[fn](*args)
                    _e = datetime.datetime.now()
                    _d = _e - _b
                    log.info('processed %s %s in %d.%03d secs'%(id, fn, _d.seconds, _d.microseconds//1000))
                    if _d.seconds > 5:
                        log.info('slow process %s(%s)'%(fn, str(args)))
                except Exception as e:
                    # 1 retry
                    traceback.print_exc()
                    log.info("retry function %s on exception %s: %s"%(fn, type(e), str(e)))
                    globals()[fn](*args)
                db(db.feed_queue.id==id).delete()
                db.commit()
            except:
                log.error("%s(%s)"%(fn, str(args)))
                traceback.print_exc()
            if queue.empty():
                log.info("stop idle process")
                break

    do_break = False
    e = None
    last = 0

    while True:
        if do_break:
            break
        n0 += 1
        n1 += 1
        n2 += 1

        try:
            if n0 == 90:
                n0 = 0
                dash_crons0()
            elif n1 == 3600:
                n1 = 0
                dash_crons1()
            elif n2 == 86400:
                n2 = 0
                dash_crons2()
        except:
            traceback.print_exc()


        try:
            #log.info(".")
            db.commit()
            queues_empty = True
            for q in queues.values():
                if not q.empty():
                    queues_empty = False
                    break
            if last > 0 and queues_empty and n0 // 60 == 0 and db(db.feed_queue.id<last).count() > 0:
                # once in a while, if queues are empty, retry errored entries
                entries = db(db.feed_queue.id<last).select(orderby=db.feed_queue.id)
                if len(entries) > 0:
                    log.info("got %d stalled entries to dequeue"% len(entries))
            else:
                # don't fetch already scheduled entries
                entries = db(db.feed_queue.id>last).select(limitby=(0,1000), orderby=db.feed_queue.id)
                if len(entries) > 0:
                    log.info("got %d entries to dequeue"% len(entries))
        except:
            # lost mysql ?
            traceback.print_exc()
            log.error("lost mysql ? sleep 10 sec")
            try: time.sleep(10)
            except KeyboardInterrupt: break
            continue

        if len(entries) == 0:
            try: time.sleep(1)
            except KeyboardInterrupt: break
            continue
        #elif n1 % 5 == 0:
            # every 100 xmlrpc calls save stats
        #    stats.dbdump()

        for w in copy.copy(workers.keys()):
            if not workers[w].is_alive():
                workers[w].join()
                del(workers[w])

        for e in entries:
            try:
                log.info("dequeue %s (id=%d)" % (e.q_fn, e.id))
                if e.q_fn in workers and not workers[e.q_fn].is_alive():
                    # clean up dead processes, so we can restart them
                    workers[e.q_fn].join()
                    del(workers[e.q_fn])
                if e.q_fn not in workers:
                    log.info("start %s worker" % e.q_fn)
                    queues[e.q_fn] = multiprocessing.Queue()
                    workers[e.q_fn] = multiprocessing.Process(target=dequeue_process, args=(e.q_fn, queues[e.q_fn]))
                    workers[e.q_fn].start()
                queues[e.q_fn].put((e.id, e.q_fn, e.q_args), block=True)
                if e.id > last:
                    last = e.id
            except KeyboardInterrupt:
                for fn in workers:
                    queues[fn].put(None)
                    workers[fn].join()
                do_break = True
                break
